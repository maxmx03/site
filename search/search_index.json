{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem vindo","text":"<p>Seja bem-vindo ao meu site! Aqui voc\u00ea encontrar\u00e1 cursos, e informa\u00e7\u00f5es sobre mim.</p>"},{"location":"CV/","title":"Max Miliano","text":"<p>Profiss\u00e3o: Analista de Sistemas</p>"},{"location":"CV/#competencias","title":"Compet\u00eancias","text":"Frontend Backend Design Outros HTML Node.js Figma Neovim CSS Express.js Atomic Design Vim Javascript / Typescript Java Adobe XD Linux Tailwindcss PHP Visual Studio Code React / Next.js Apollo GraphQl Markdown React Native Prisma Github Redux Firebase Bash Redux Toolkit Sqlite Lua Material UI MySQL Python Chakra UI Mongodb Ingl\u00eas Flutter"},{"location":"CV/#experiencia","title":"Experi\u00eancia","text":"Empresa Cargo Dura\u00e7\u00e3o SZ Solu\u00e7\u00f5es Estagi\u00e1rio - Desenvolvedor Web e Mobile 1 ano"},{"location":"CV/#escolaridade","title":"Escolaridade","text":"Faculdade Curso Dura\u00e7\u00e3o Anhanguera An\u00e1lise e Desenvolvimento de Sistemas 2 anos e meio"},{"location":"CV/#social","title":"Social","text":"<ul> <li>Linkedin</li> <li>Github</li> </ul>"},{"location":"Lua%20Guide/Basics/arithmetic/","title":"Opera\u00e7\u00f5es Aritm\u00e9ticas","text":"<p>As opera\u00e7\u00f5es aritm\u00e9ticas s\u00e3o amplamente utilizadas na programa\u00e7\u00e3o para realizar c\u00e1lculos matem\u00e1ticos.</p>"},{"location":"Lua%20Guide/Basics/arithmetic/#operador-de-adicao","title":"Operador de adi\u00e7\u00e3o (+)","text":"<p>O operador de adi\u00e7\u00e3o (<code>+</code>) \u00e9 utilizado para somar dois valores. No c\u00f3digo em Lua abaixo, temos uma fun\u00e7\u00e3o chamada adicao que recebe dois par\u00e2metros, <code>x</code> e <code>y</code>, e retorna a soma desses valores.</p> LuaConsole <pre><code>local function adicao(x, y)\n    return x + y\nend\n\nlocal resultado_adicao1 = adicao(2, 2)\nlocal resultado_adicao2 = adicao(2, 3)\nlocal resultado_adicao3 = adicao(10, 5)\n\nprint(resultado_adicao1)\nprint(resultado_adicao2)\nprint(resultado_adicao3)\n</code></pre> <pre><code>4\n5\n15\n</code></pre>"},{"location":"Lua%20Guide/Basics/arithmetic/#operador-de-subtracao-","title":"Operador de subtra\u00e7\u00e3o (-)","text":"<p>O operador de subtra\u00e7\u00e3o (<code>-</code>) \u00e9 utilizado para subtrair um valor de outro. No c\u00f3digo em Lua abaixo, temos uma fun\u00e7\u00e3o chamada subtracao que recebe dois par\u00e2metros, <code>x</code> e <code>y</code>, e retorna a diferen\u00e7a entre esses valores.</p> LuaConsole <pre><code>local function subtracao(x, y)\n    return x - y\nend\n\nlocal resultado_subtracao1 = subtracao(2, 2)\nlocal resultado_subtracao2 = subtracao(2, 3)\nlocal resultado_subtracao3 = subtracao(10, 5)\n\nprint(resultado_subtracao1)\nprint(resultado_subtracao2)\nprint(resultado_subtracao3)\n</code></pre> <pre><code>0\n-1\n5\n</code></pre>"},{"location":"Lua%20Guide/Basics/arithmetic/#operador-de-multiplicacao","title":"Operador de multiplica\u00e7\u00e3o (*)","text":"<p>O operador de multiplica\u00e7\u00e3o (<code>*</code>) \u00e9 utilizado para multiplicar dois valores. No c\u00f3digo em Lua abaixo, temos uma fun\u00e7\u00e3o chamada multiplicacao que recebe dois par\u00e2metros, <code>x</code> e <code>y</code>, e retorna o produto desses valores.</p> LuaConsole <pre><code>local function multiplicacao(x, y)\n    return x * y\nend\n\nlocal resultado_multiplicacao1 = multiplicacao(2, 2)\nlocal resultado_multiplicacao2 = multiplicacao(2, 3)\nlocal resultado_multiplicacao3 = multiplicacao(10, 5)\n\nprint(resultado_multiplicacao1)\nprint(resultado_multiplicacao2)\nprint(resultado_multiplicacao3)\n</code></pre> <pre><code>4\n6\n50\n</code></pre>"},{"location":"Lua%20Guide/Basics/arithmetic/#operador-de-divisao","title":"Operador de divis\u00e3o (/)","text":"<p>O operador de divis\u00e3o (<code>/</code>) \u00e9 utilizado para dividir um valor por outro. No c\u00f3digo em Lua abaixo, temos uma fun\u00e7\u00e3o chamada divisao que recebe dois par\u00e2metros, <code>x</code> e <code>y</code>, e retorna o quociente da divis\u00e3o desses valores.</p> LuaConsole <pre><code>local function divisao(x, y)\n    return x / y\nend\n\nlocal resultado_divisao1 = divisao(4, 2)\nlocal resultado_divisao2 = divisao(5, 2)\nlocal resultado_divisao3 = divisao(10, 3)\n\nprint(resultado_divisao1)\nprint(resultado_divisao2)\nprint(resultado_divisao3)\n</code></pre> <pre><code>2.0\n2.5\n3.3333333333333\n</code></pre> <p>Tip</p> <p>Em lua, se voc\u00ea tentar realizar opera\u00e7\u00f5es aritm\u00e9ticas entre strings, por exemplo <code>\"2\" + \"2\"</code> ou <code>\"10\" / \"5\"</code>, o pr\u00f3prio Lua \u00e9 capaz de converter implicitamente essas strings em n\u00fameros e realizar as opera\u00e7\u00f5es corretamente. Isso significa que voc\u00ea n\u00e3o precisa usar explicitamente a fun\u00e7\u00e3o <code>tonumber()</code> para converter as strings em n\u00fameros antes de realizar as opera\u00e7\u00f5es.</p>"},{"location":"Lua%20Guide/Basics/arithmetic/#operador-de-resto-da-divisao","title":"Operador de resto da divis\u00e3o (%)","text":"<p>O operador de resto da divis\u00e3o (<code>%</code>) \u00e9 utilizado para obter o resto da divis\u00e3o entre dois valores. No c\u00f3digo em Lua abaixo, temos uma fun\u00e7\u00e3o chamada restoDivisao que recebe dois par\u00e2metros, <code>x</code> e <code>y</code>, e retorna o resto da divis\u00e3o entre esses valores.</p> LuaConsole <pre><code>local function restoDivisao(x, y)\n    return x % y\nend\n\nlocal resultado_restoDivisao1 = restoDivisao(7, 3)\nlocal resultado_restoDivisao2 = restoDivisao(10, 4)\nlocal resultado_restoDivisao3 = restoDivisao(15, 6)\n\nprint(resultado_restoDivisao1)\nprint(resultado_restoDivisao2)\nprint(resultado_restoDivisao3)\n</code></pre> <pre><code>1\n2\n3\n</code></pre>"},{"location":"Lua%20Guide/Basics/arithmetic/#operador-de-exponenciacao","title":"Operador de exponencia\u00e7\u00e3o (^)","text":"<p>O operador de exponencia\u00e7\u00e3o (<code>^</code>) em Lua \u00e9 usado para calcular a pot\u00eancia de um n\u00famero. Ele permite elevar um n\u00famero \u00e0 pot\u00eancia de outro n\u00famero.</p> <p>A sintaxe para usar o operador de exponencia\u00e7\u00e3o \u00e9: base <code>^</code> expoente.</p> LuaConsole <pre><code>local base = 2\nlocal expoente = 3\nlocal resultado = base ^ expoente\n\nprint(resultado)\n</code></pre> <pre><code>8.0\n</code></pre>"},{"location":"Lua%20Guide/Basics/arithmetic/#avaliacao-de-expressoes-em-lua-carregando-chunk","title":"Avalia\u00e7\u00e3o de Express\u00f5es em Lua (carregando chunk)","text":"<p>Em Lua, \u00e9 poss\u00edvel avaliar express\u00f5es dinamicamente utilizando a fun\u00e7\u00e3o <code>load()</code>. Isso permite que voc\u00ea execute c\u00e1lculos com express\u00f5es representadas como strings.</p> <p>Info</p> <p>A fun\u00e7\u00e3o load em Lua \u00e9 usada para carregar e compilar um trecho de c\u00f3digo (conhecido como \"chunk\"). Ela permite que voc\u00ea converta uma string contendo c\u00f3digo Lua em uma fun\u00e7\u00e3o execut\u00e1vel ou carregue um trecho de c\u00f3digo de uma fun\u00e7\u00e3o existente.</p> LuaConsole <pre><code>local expression = \"10 * 2 - 5\"\n\nlocal operacao, err = load(\"return \" .. expression)\n\nif type(operacao) == \"nil\" then\n  return\nend\n\nif not err then\n  local resultado = operacao()\n\n  print(string.format(\"%s = %d\", expression, resultado))\nelse\n  print(err)\nend\n</code></pre> <pre><code>10 * 2 - 5 = 15\n</code></pre>"},{"location":"Lua%20Guide/Basics/break/","title":"Break","text":"<p>O <code>break</code> pode ser utilizado para interromper a execu\u00e7\u00e3o de um loop.</p> LuaConsole <pre><code>for i = 1, 10 do\n  if i == 5 then\n    break -- Interrompe o loop quando i \u00e9 igual a 5\n  end\n\n  print(\"Current value:\", i)\nend\n</code></pre> <pre><code>Current value:  1\nCurrent value:  2\nCurrent value:  3\nCurrent value:  4\n</code></pre>"},{"location":"Lua%20Guide/Basics/break/#continue","title":"Continue","text":"<p>Em Lua, n\u00e3o h\u00e1 uma instru\u00e7\u00e3o nativa de <code>continue</code>. No entanto, voc\u00ea pode simular o comportamento do <code>continue</code> usando um <code>if</code> para pular para a pr\u00f3xima itera\u00e7\u00e3o do loop.</p> LuaConsole <pre><code>for i = 1, 10 do\n  if i == 5 then\n    goto continue -- Simula o 'continue', pulando para a pr\u00f3xima itera\u00e7\u00e3o do loop\n  end\n\n  print(\"Current value:\", i)\n\n  ::continue:: -- R\u00f3tulo 'continue'\nend\n</code></pre> <pre><code>Current value:  1\nCurrent value:  2\nCurrent value:  3\nCurrent value:  4\nCurrent value:  6\nCurrent value:  7\nCurrent value:  8\nCurrent value:  9\nCurrent value:  10\n</code></pre>"},{"location":"Lua%20Guide/Basics/comments/","title":"Coment\u00e1rios","text":"<p>Em Lua, existem duas maneiras de adicionar coment\u00e1rios ao seu c\u00f3digo.</p>"},{"location":"Lua%20Guide/Basics/comments/#comentarios-de-uma-linha","title":"Coment\u00e1rios de uma linha","text":"<p>Os coment\u00e1rios de uma linha s\u00e3o criados utilizando dois h\u00edfens (<code>--</code>). Tudo que estiver ap\u00f3s os h\u00edfens em uma linha ser\u00e1 considerado um coment\u00e1rio e ser\u00e1 ignorado pelo interpretador Lua.</p> <pre><code>-- Este \u00e9 um coment\u00e1rio de uma linha\n</code></pre>"},{"location":"Lua%20Guide/Basics/comments/#comentarios-de-varias-linhas","title":"Coment\u00e1rios de v\u00e1rias linhas","text":"<p>Os coment\u00e1rios de v\u00e1rias linhas s\u00e3o delimitados por <code>--[[no in\u00edcio e]]</code> no final. Todo o conte\u00fado entre esses delimitadores ser\u00e1 considerado um coment\u00e1rio e ser\u00e1 ignorado pelo interpretador.</p> <pre><code>--[[\n  Este \u00e9 um coment\u00e1rio\n  de m\u00faltiplas linhas\n]]\n</code></pre> <p>Tip</p> <p>Coment\u00e1rios s\u00e3o uma maneira importante de documentar o seu c\u00f3digo em Lua. Eles ajudam a fornecer informa\u00e7\u00f5es adicionais, explicar a l\u00f3gica por tr\u00e1s do c\u00f3digo.</p>"},{"location":"Lua%20Guide/Basics/console/","title":"Entrada do console","text":"<p>Para obter entrada do usu\u00e1rio no console, voc\u00ea pode usar a fun\u00e7\u00e3o <code>io.read()</code>. Aqui est\u00e1 um exemplo de como obter a entrada do usu\u00e1rio e exibi-la no console:</p> <pre><code>local nome, idade\n\nprint(\"Por favor insira seu nome:\")\nnome = io.read()\n\nprint(\"Quantos anos voc\u00ea tem?\")\nidade = io.read(\"n\")\n\nprint(string.format(\"Ol\u00e1 %s, voc\u00ea tem %d anos de idade\", nome, idade))\n</code></pre>"},{"location":"Lua%20Guide/Basics/control/","title":"Estruturas de Controle","text":"<p>As estruturas de controle s\u00e3o utilizadas para tomar decis\u00f5es e controlar o fluxo de execu\u00e7\u00e3o com base em valores booleanos. No Lua, a estrutura de controle utilizada \u00e9 o <code>if</code>. O <code>if</code> avalia uma express\u00e3o booleana e, se o resultado for verdadeiro, executa um bloco de c\u00f3digo delimitado pelas palavras-chave <code>then</code> e <code>end</code>.</p> <p>exemplo:</p> LuaConsoleFlow chart <pre><code>local x = 5\nlocal is_number = type(x) == \"number\"\n\nif is_number then\n    print(\"x \u00e9 um n\u00famero!\")\nend\n</code></pre> <pre><code>x \u00e9 um n\u00famero!\n</code></pre> <pre><code>graph LR\n  A[if] --&gt; B{is_number?};\n  B --&gt;|true| C[x \u00e9 um n\u00famero];\n  C --&gt;D[end]\n  B --&gt;|false| D[end];</code></pre>"},{"location":"Lua%20Guide/Basics/control/#elseif","title":"<code>elseif</code>","text":"<p>O <code>elseif</code> \u00e9 utilizado para adicionar condi\u00e7\u00f5es adicionais que ser\u00e3o verificadas se a condi\u00e7\u00e3o anterior no if n\u00e3o for satisfeita. Ele permite testar uma s\u00e9rie de condi\u00e7\u00f5es consecutivas at\u00e9 que uma delas seja verdadeira.</p> LuaConsoleFlow chart <pre><code>local idade = 18\n\nif idade &lt; 18 then\n    print(\"Voc\u00ea \u00e9 menor de idade.\")\nelseif idade == 18 then\n    print(\"Voc\u00ea acabou de atingir a maioridade!\")\nelseif idade &gt; 18 then\n    print(\"Voc\u00ea \u00e9 maior de idade.\")\nend\n</code></pre> <pre><code>Voc\u00ea acabou de atingir a maioridade!\n</code></pre> <pre><code>graph LR\n  A[if] --&gt; B{idade &lt; 18};\n  B --&gt;|true| C[Voc\u00ea \u00e9 menor de idade];\n  B --&gt;|false| D{idade == 18};\n  D --&gt; |true| E[Voc\u00ea acabou de atingir a maioridade!]\n  D --&gt; |false| F{idade &gt; 18}\n  F --&gt; |true| G[Voc\u00ea \u00e9 maior de idade.]\n  F --&gt; |false| H[end]\n  C --&gt; H[end]\n  G --&gt; H[end]\n  E --&gt; H[end]</code></pre>"},{"location":"Lua%20Guide/Basics/control/#else","title":"<code>else</code>","text":"<p>A palavra-chave else \u00e9 utilizada como uma condi\u00e7\u00e3o final em uma estrutura if. Ela \u00e9 executada quando todas as condi\u00e7\u00f5es anteriores forem avaliadas como falsas.</p> LuaConsoleFlow chart <pre><code>local temperatura = 25\n\nif temperatura &lt; 0 then\n    print(\"Est\u00e1 muito frio!\")\nelseif temperatura &gt; 30 then\n    print(\"Est\u00e1 muito quente!\")\nelse\n    print(\"A temperatura est\u00e1 agrad\u00e1vel.\")\nend\n</code></pre> <pre><code>A temperatura est\u00e1 agrad\u00e1vel.\n</code></pre> <pre><code>graph LR\n    A[if] --&gt; B{temperatura &lt; 0};\n    B --&gt;|true| C[Est\u00e1 muito frio!];\n    B --&gt;|false| D{temperatura &gt; 30};\n    D --&gt; |true| E[Est\u00e1 muito quente!]\n    D --&gt; |false| F[A temperatura est\u00e1 agrad\u00e1vel.]\n    F --&gt; H[end]\n    C --&gt; H[end]\n    E --&gt; H[end]</code></pre>"},{"location":"Lua%20Guide/Basics/control/#nesting-if-statements","title":"Nesting if statements","text":"<p>A estrutura \"Nesting if statements\" \u00e9 utilizada quando desejamos incluir uma estrutura if dentro de outra estrutura if. Isso permite criar condi\u00e7\u00f5es mais complexas e aninhadas. Aqui est\u00e1 um exemplo com descri\u00e7\u00e3o, exemplo em Lua e um flowchart correspondente:</p> LuaConsoleFlow Chart <pre><code>local idade = 20\n\nif idade &gt;= 18 then\n    print(\"Voc\u00ea \u00e9 maior de idade.\")\n\n    if idade &gt;= 21 then\n        print(\"Voc\u00ea tamb\u00e9m pode beber \u00e1lcool nos EUA.\")\n    else\n        print(\"Voc\u00ea n\u00e3o pode beber \u00e1lcool nos EUA.\")\n    end\nelse\n    print(\"Voc\u00ea \u00e9 menor de idade.\")\nend\n</code></pre> <pre><code>Voc\u00ea \u00e9 maior de idade.\nVoc\u00ea n\u00e3o pode beber \u00e1lcool nos EUA.\n</code></pre> <pre><code>graph LR\n  A[if] --&gt; B{idade &gt;= 18};\n  B --&gt;|true| C[Voc\u00ea \u00e9 maior de idade.] --&gt; D{idade &gt;= 21};\n  D --&gt; |true| E[Voc\u00ea tamb\u00e9m pode beber \u00e1lcool nos EUA.]\n  D --&gt; |false| F[Voc\u00ea n\u00e3o pode beber \u00e1lcool nos EUA.]\n  B --&gt;|false| H[Voc\u00ea \u00e9 menor de idade];\n  E --&gt; I[end]\n  F --&gt; I[end]\n  H --&gt; I[end]</code></pre>"},{"location":"Lua%20Guide/Basics/function/","title":"Definindo Fun\u00e7\u00f5es","text":"<p>Em Lua, as fun\u00e7\u00f5es s\u00e3o usadas para agrupar um conjunto de instru\u00e7\u00f5es que podem ser chamadas e executadas em diferentes partes do c\u00f3digo. Elas s\u00e3o extremamente \u00fateis para evitar a repeti\u00e7\u00e3o de c\u00f3digo e organizar a l\u00f3gica do programa.</p> <p>Atribuindo uma fun\u00e7\u00e3o an\u00f4nima a uma vari\u00e1vel:</p> <pre><code>local hello = function()\n    print(\"Ol\u00e1, mundo!\")\nend\n</code></pre> <p>Nesse exemplo, uma fun\u00e7\u00e3o an\u00f4nima \u00e9 atribu\u00edda \u00e0 vari\u00e1vel <code>hello</code>. Essa abordagem permite que voc\u00ea chame a fun\u00e7\u00e3o posteriormente usando o nome da vari\u00e1vel seguido de par\u00eanteses:</p> LuaConsole <pre><code>hello()\n</code></pre> <pre><code>Ol\u00e1, mundo!\n</code></pre> <p>Usando a declara\u00e7\u00e3o local function:</p> <pre><code>local function hello()\n    print(\"Ol\u00e1, mundo!\")\nend\n</code></pre> <p>Essa forma mais comum de definir fun\u00e7\u00f5es permite que voc\u00ea declare uma fun\u00e7\u00e3o com um nome expl\u00edcito, nesse caso, <code>hello</code>. A fun\u00e7\u00e3o tamb\u00e9m pode receber par\u00e2metros entre os par\u00eanteses, se necess\u00e1rio.</p> LuaConsole <pre><code>hello()\n</code></pre> <pre><code>Ol\u00e1, mundo!\n</code></pre> <p>Ambas as formas s\u00e3o equivalentes em termos de funcionalidade. No entanto, a declara\u00e7\u00e3o <code>local function</code> permite que a fun\u00e7\u00e3o seja chamada antes de sua defini\u00e7\u00e3o no c\u00f3digo, enquanto a atribui\u00e7\u00e3o <code>local hello = function()</code> exige que a fun\u00e7\u00e3o seja definida antes de ser chamada.</p> LuaConsole <pre><code>local function hello()\n    print(\"Ol\u00e1, mundo\")\n    hello()\nend\n</code></pre> <pre><code>Ol\u00e1, mundo\nOl\u00e1, mundo\nOl\u00e1, mundo\nOl\u00e1, mundo\nOl\u00e1, mundo\nOl\u00e1, mundo\nOl\u00e1, mundo\n...\n</code></pre> <pre><code>local hello = function()\n    print(\"Ol\u00e1, mundo\")\n    hello() -- undefined global hello\nend\n</code></pre> <p>Tip</p> <p>Omitindo a palavra chave <code>local</code> voc\u00ea estar\u00e1 criando fun\u00e7\u00f5es com escopo global. \u00c9 recomendado criar fun\u00e7\u00f5es locais para evitar poluir o escopo global e evitar conflitos com outras partes do c\u00f3digo.</p>"},{"location":"Lua%20Guide/Basics/function/#argumentos-de-uma-funcao","title":"Argumentos de uma fun\u00e7\u00e3o","text":"<p>Ao definir uma fun\u00e7\u00e3o em Lua, voc\u00ea pode especificar os argumentos que ela recebe. Os argumentos s\u00e3o valores que podem ser passados para a fun\u00e7\u00e3o quando ela \u00e9 chamada e s\u00e3o usados dentro do corpo da fun\u00e7\u00e3o para realizar opera\u00e7\u00f5es espec\u00edficas.</p> LuaConsole <pre><code>local function saudacao(nome)\n    print(\"Ol\u00e1, \" .. nome .. \"!\")\nend\n\nsaudacao(\"Jo\u00e3o\")\nsaudacao(\"Maria\")\n</code></pre> <pre><code>Ol\u00e1, Jo\u00e3o!\nOl\u00e1, Maria!\n</code></pre> <p>Voc\u00ea pode definir m\u00faltiplos argumentos separando-os por v\u00edrgulas na defini\u00e7\u00e3o da fun\u00e7\u00e3o. Nesse exemplo, a fun\u00e7\u00e3o soma possui dois argumentos: <code>a</code> e <code>b</code>. Esses argumentos s\u00e3o somados e o resultado \u00e9 impresso:</p> LuaConsole <pre><code>local function soma(a, b)\n    local resultado = a + b\n    print(\"A soma de \" .. a .. \" e \" .. b .. \" \u00e9 \" .. resultado)\nend\n\nsoma(5, 3)\nsoma(10, -2)\n</code></pre> <pre><code>A soma de 5 e 3 \u00e9 8\nA soma de 10 e -2 \u00e9 8\n</code></pre>"},{"location":"Lua%20Guide/Basics/function/#retornando-um-valor-ou-mais-valores","title":"Retornando um valor ou mais valores","text":"<p>Em Lua, uma fun\u00e7\u00e3o pode retornar um valor ou v\u00e1rios valores. Para retornar um valor, voc\u00ea pode usar a palavra-chave <code>return</code> seguida do valor que deseja retornar. Por exemplo:</p> LuaConsole <pre><code>local function dobrar(numero)\n    return numero * 2\nend\n\nlocal numero = 10\nlocal numeroDobrado = dobrar(numero)\n\nprint(numeroDobrado)\n</code></pre> <pre><code>20\n</code></pre> <p>Voc\u00ea tamb\u00e9m pode retornar v\u00e1rios valores de uma fun\u00e7\u00e3o separando-os por v\u00edrgulas. Por exemplo:</p> LuaConsole <pre><code>local function dobrar(numero)\n    return numero * 2, math.type(numero)\nend\n\nlocal numero = 10\nlocal numeroDobrado, tipo = dobrar(numero)\n\nprint(numeroDobrado, tipo)\n</code></pre> <pre><code>20, integer\n</code></pre>"},{"location":"Lua%20Guide/Basics/function/#argumentos-indefinidos-de-uma-funcao","title":"Argumentos indefinidos de uma fun\u00e7\u00e3o","text":"<p>Em Lua, \u00e9 poss\u00edvel definir fun\u00e7\u00f5es com um n\u00famero indefinido de argumentos. Isso \u00e9 \u00fatil quando voc\u00ea deseja lidar com uma quantidade vari\u00e1vel de valores passados para a fun\u00e7\u00e3o. Para isso, voc\u00ea pode usar os par\u00e2metros especiais <code>...</code> (pontos reticentes) na declara\u00e7\u00e3o da fun\u00e7\u00e3o.</p> LuaConsole <pre><code>local function somar(...)\n    local total = 0\n\n    for _, valor in ipairs({...}) do\n        total = total + valor\n    end\n\n    return total\nend\n\nprint(somar(1, 2, 3))\nprint(somar(4, 5, 6, 7, 8))\n</code></pre> <pre><code>6\n30\n</code></pre>"},{"location":"Lua%20Guide/Basics/function/#definindo-uma-funcao-closure","title":"Definindo uma Fun\u00e7\u00e3o Closure","text":"<p>Uma das principais utilidades das fun\u00e7\u00f5es Closure \u00e9 retorn\u00e1-las de outras fun\u00e7\u00f5es, permitindo o acesso ao contexto da fun\u00e7\u00e3o externa.</p> LuaConsole <pre><code>local function counter()\n  local count = 0\n\n  return function()\n    count = count + 1\n    return count\n  end\nend\n\nlocal increment = counter()\n\nprint(increment()) -- 1\nprint(increment()) -- 2\nprint(increment()) -- 3\n</code></pre> <pre><code>1\n2\n3\n</code></pre> <p>Neste exemplo, a fun\u00e7\u00e3o counter retorna uma fun\u00e7\u00e3o Closure que incrementa um contador a cada chamada. A vari\u00e1vel count \u00e9 lembrada pela fun\u00e7\u00e3o Closure e mant\u00e9m seu valor entre as chamadas subsequentes. Ao chamar increment repetidamente, obtemos os valores incrementais do contador.</p>"},{"location":"Lua%20Guide/Basics/goto/","title":"Estrutura de Salto Goto","text":"<p>A estrutura de salto Goto \u00e9 uma constru\u00e7\u00e3o de controle de fluxo dispon\u00edvel em algumas linguagens de programa\u00e7\u00e3o, incluindo Lua. Essa estrutura permite que o programa desvie incondicionalmente para uma determinada posi\u00e7\u00e3o no c\u00f3digo identificada por um r\u00f3tulo (label).</p> LuaRecomendadoConsole <pre><code>local function foreach(t, callback)\n  if type(t) ~= 'table' then\n    goto exit\n  end\n\n  local size = #t\n\n  if size == 0 then\n    goto exit\n  end\n\n  local key = 1\n\n  ::verify::\n  if size &gt;= key then\n    goto increment\n  else\n    goto exit\n  end\n\n  ::increment::\n  callback(key, t[key])\n  key = key + 1\n  goto verify\n\n  ::exit::\nend\n\nlocal meuArray = {\n    \"Primeiro elemento\",\n    \"Segundo elemento\",\n    \"Terceiro elemento\",\n    \"\u00daltimo elemento\",\n}\n\nforeach(meuArray, function(key, value)\n  print(key, value)\nend)\n</code></pre> <pre><code>local function foreach(t, callback)\n  if type(t) ~= 'table' then\n    return\n  end\n\n  local size = #t\n\n  if size == 0 then\n    return\n  end\n\n  for key = 1, size do\n    callback(key, t[key])\n  end\nend\n\nforeach(meuArray, function(key, value)\n  print(key, value)\nend)\n</code></pre> <pre><code>1   Primeiro elemento\n2   Segundo elemento\n3   Terceiro elemento\n4   \u00daltimo elemento\n</code></pre> <p>Warning</p> <p>O uso da estrutura de salto \u00e9 geralmente desencorajado e considerado uma pr\u00e1tica de programa\u00e7\u00e3o ruim.</p>"},{"location":"Lua%20Guide/Basics/logical/","title":"Operadores L\u00f3gicos","text":"<p>Os operadores l\u00f3gicos testam e combinam condi\u00e7\u00f5es l\u00f3gicas. Eles permitem que voc\u00ea avalie a veracidade de express\u00f5es e tome decis\u00f5es com base nesses resultados. Os operadores l\u00f3gicos s\u00e3o comumente usados em estruturas de controle condicional, como condicionais if-else e loops, para determinar o fluxo de execu\u00e7\u00e3o do programa.</p> <p>Note</p> <p>Em Lua, qualquer valor que n\u00e3o seja <code>false</code> \u00e9 considerado <code>true</code>. Apenas dois valores representam <code>false</code> para operadores l\u00f3gicos, o valor constante de <code>false</code> e <code>nil</code>; todos os outros valores s\u00e3o considerados como verdadeiros.</p>"},{"location":"Lua%20Guide/Basics/logical/#operador-logico-and","title":"Operador l\u00f3gico \"and\"","text":"<p>O operador l\u00f3gico <code>and</code> retorna o primeiro valor falso encontrado ou o \u00faltimo valor verdadeiro caso todos sejam verdadeiros.</p> LuaConsole <pre><code>local x = true and false\nlocal y = true and true\nlocal z = false and true\nlocal t = true and true and \"\" and 0 -- todos so valores s\u00e3o verdadeiros.\n\nprint(x)\nprint(y)\nprint(z)\nprint(t)\n</code></pre> <pre><code>false\ntrue\nfalse\n0\n</code></pre>"},{"location":"Lua%20Guide/Basics/logical/#tabela-verdade-para-operadores-logicos","title":"Tabela Verdade para Operadores L\u00f3gicos","text":"<p>A tabela a seguir mostra todas as combina\u00e7\u00f5es poss\u00edveis dos operandos <code>A</code> e <code>B</code> nos operadores <code>and</code> e <code>or</code>, juntamente com seus respectivos resultados.</p> Operando A Operando B <code>A and B</code> <code>A or B</code> <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>false</code> <code>false</code> <code>true</code> <code>false</code> <code>true</code> <code>false</code> <code>true</code> <code>false</code> <code>false</code> <code>false</code> <code>false</code>"},{"location":"Lua%20Guide/Basics/logical/#operador-logico-or","title":"Operador l\u00f3gico \"or\"","text":"<p>O operador l\u00f3gico <code>or</code> retorna o primeiro valor verdadeiro encontrado ou o \u00faltimo valor falso, caso todos sejam falsos.</p> LuaConsole <pre><code>local x = false or true\nlocal y = true or true\nlocal z = false or false\nlocal f = false or false or nil -- todos os valores s\u00e3o falsos\n\nprint(x)\nprint(y)\nprint(z)\nprint(f)\n</code></pre> <pre><code>true\ntrue\nfalse\nnil\n</code></pre>"},{"location":"Lua%20Guide/Basics/logical/#operador-logico-not","title":"Operador l\u00f3gico \"not\"","text":"<p>O operador l\u00f3gico <code>not</code> inverte o valor de um operando. Se o operando for verdadeiro, retorna <code>false</code>; se o operando for falso, retorna <code>true</code>.</p> LuaConsole <pre><code>local x = not true\nlocal y = not false\n\nprint(x)\nprint(y)\n</code></pre> <pre><code>false\ntrue\n</code></pre>"},{"location":"Lua%20Guide/Basics/loops/","title":"Estrutura de repeti\u00e7\u00e3o","text":"<p>As estruturas de repeti\u00e7\u00e3o permitem executar um bloco de c\u00f3digo repetidamente com base em uma condi\u00e7\u00e3o. Lua oferece tr\u00eas tipos principais de estruturas de repeti\u00e7\u00e3o: <code>for</code> loop, <code>while</code> loop. Vamos explorar cada uma delas:</p>"},{"location":"Lua%20Guide/Basics/loops/#for-numerico","title":"For n\u00famerico","text":"<p>O loop for \u00e9 utilizado quando se conhece previamente o n\u00famero de itera\u00e7\u00f5es. Ele percorre uma sequ\u00eancia de valores e executa um bloco de c\u00f3digo para cada valor da sequ\u00eancia.</p> <p>Exemplo 1:</p> LuaConsoleFlow Chart <pre><code>for i = 1, 5, 1 do\n    print(i)\nend\n</code></pre> <pre><code>1\n2\n3\n4\n5\n</code></pre> <pre><code>graph LR\n    A[for] --&gt; B[Inicializa\u00e7\u00e3o]\n    B --&gt; C[Condi\u00e7\u00e3o]\n    C --&gt;|true| D[Execu\u00e7\u00e3o do Bloco]\n    D --&gt; E[Incremento]\n    E --&gt; C\n    C --&gt;|false| F[end]</code></pre> <p>Exemplo 2:</p> LuaConsoleFlow Chart <pre><code>for i = 5, 1, -1 do\n    print(i)\nend\n</code></pre> <pre><code>5\n4\n3\n2\n1\n</code></pre> <pre><code>graph LR\n    A[for] --&gt; B[Inicializa\u00e7\u00e3o]\n    B --&gt; C[Condi\u00e7\u00e3o]\n    C --&gt;|true| D[Execu\u00e7\u00e3o do Bloco]\n    D --&gt; E[Decremento]\n    E --&gt; C\n    C --&gt;|false| F[end]</code></pre> <p>O for loop possui tr\u00eas par\u00e2metros: o primeiro \u00e9 a vari\u00e1vel de controle (no caso, <code>i</code>), o segundo \u00e9 o limite (o loop ser\u00e1 executado enquanto a vari\u00e1vel de controle for menor ou igual ao limite), e o terceiro \u00e9 o incremento da vari\u00e1vel de controle a cada itera\u00e7\u00e3o.</p> <p>Tip</p> <p>Se voc\u00ea omitir o terceiro par\u00e2metro no for loop em Lua, ele assumir\u00e1 um valor padr\u00e3o de 1. Isso significa que a vari\u00e1vel de controle ser\u00e1 incrementada em 1 a cada itera\u00e7\u00e3o.</p>"},{"location":"Lua%20Guide/Basics/loops/#while-loop","title":"While Loop","text":"<p>O loop while \u00e9 utilizado quando a condi\u00e7\u00e3o de repeti\u00e7\u00e3o n\u00e3o \u00e9 conhecida antecipadamente. Ele executa um bloco de c\u00f3digo repetidamente enquanto a condi\u00e7\u00e3o especificada for verdadeira.</p> LuaConsoleFlow chart <pre><code>local i = 1\n\nwhile i &lt;= 5 do\n    print(i)\n    i = i + 1\nend\n</code></pre> <pre><code>1\n2\n3\n4\n5\n</code></pre> <pre><code>graph LR\n    A[while] --&gt; B[Condi\u00e7\u00e3o]\n    B --&gt;|true| C[Execu\u00e7\u00e3o do Bloco]\n    C --&gt; B\n    B --&gt;|false| E[end]</code></pre>"},{"location":"Lua%20Guide/Basics/loops/#repeat-until","title":"<code>repeat-until</code>","text":"<p>A estrutura <code>repeat-until</code> \u00e9 uma forma de loop em Lua que executa um bloco de c\u00f3digo repetidamente at\u00e9 que uma condi\u00e7\u00e3o especificada seja verdadeira.</p> <p>Note</p> <p>A principal diferen\u00e7a em rela\u00e7\u00e3o ao loop <code>while</code> \u00e9 que a condi\u00e7\u00e3o \u00e9 verificada no final da itera\u00e7\u00e3o, ou seja, o bloco de c\u00f3digo \u00e9 executado pelo menos uma vez antes de verificar a condi\u00e7\u00e3o.</p> LuaConsoleFlow chart <pre><code>local i = 1\n\nrepeat\n    print(i)\n    i = i + 1\nuntil i &gt; 5\n</code></pre> <pre><code>1\n2\n3\n4\n5\n</code></pre> <pre><code>graph LR\n    A[repeat] --&gt; B[Execu\u00e7\u00e3o do Bloco]\n    B --&gt; C[Verifica\u00e7\u00e3o da Condi\u00e7\u00e3o]\n    C --&gt;|true| D[end]\n    C --&gt;|false| B</code></pre> <p>Neste exemplo, o bloco de c\u00f3digo ser\u00e1 executado repetidamente enquanto a condi\u00e7\u00e3o <code>i &gt; 5</code> for falsa. A cada itera\u00e7\u00e3o, o valor de <code>i</code> \u00e9 incrementado em 1.</p>"},{"location":"Lua%20Guide/Basics/loops/#for-generico-ipars","title":"For generico (ipars)","text":"<p>O <code>for loop</code> gen\u00e9rico em Lua permite percorrer uma cole\u00e7\u00e3o de valores arbitr\u00e1rios, como uma tabela. Ele oferece uma maneira conveniente de iterar sobre os elementos de uma cole\u00e7\u00e3o sem precisar acompanhar manualmente o \u00edndice ou o estado de itera\u00e7\u00e3o.</p> LuaConsole <pre><code>local numeros = {10, 20, 30, 40, 50}\n\nfor index, numero in ipairs(numeros) do\n    print(index, numero)\nend\n</code></pre> <pre><code>1   10\n2   20\n3   30\n4   40\n5   50\n</code></pre>"},{"location":"Lua%20Guide/Basics/loops/#for-generico-pairs","title":"For generico (pairs)","text":"<p>O <code>pairs()</code> \u00e9 uma fun\u00e7\u00e3o em Lua que retorna um iterador para percorrer todas as chaves e valores de uma tabela. Ao contr\u00e1rio do <code>ipairs()</code>, que itera apenas sobre as chaves num\u00e9ricas da tabela em ordem crescente, o <code>pairs()</code> itera sobre todas as chaves da tabela, independentemente do tipo ou ordem.</p> LuaConsole <pre><code>local pessoa = {nome = \"Jo\u00e3o\", idade = 30, cidade = \"S\u00e3o Paulo\"}\n\nfor chave, valor in pairs(pessoa) do\n    print(chave, valor)\nend\n</code></pre> <pre><code>nome    Jo\u00e3o\nidade   30\ncidade  S\u00e3o Paulo\n</code></pre>"},{"location":"Lua%20Guide/Basics/loops/#como-iterar-strings","title":"Como iterar strings","text":"<p>Em Lua, \u00e9 poss\u00edvel iterar uma string tratando-a como uma sequ\u00eancia de caracteres. Voc\u00ea pode usar o for loop gen\u00e9rico em conjunto com a fun\u00e7\u00e3o string.gmatch para percorrer cada caractere da string.</p> <p>Tipe</p> <p>O ponto <code>\".\"</code> passado como argumento para gmatch representa um padr\u00e3o que captura cada caractere individual da string. Dessa forma, o for loop itera por todos os caracteres da string.</p> LuaAlternativaConsole <pre><code>local texto = \"Ol\u00e1, Lua!\"\n\nfor caractere in texto:gmatch(\".\") do\n    print(caractere)\nend\n</code></pre> <pre><code>local texto = \"Ol\u00e1, Lua!\"\nlocal tamanho = #texto\n\nfor i = 1, tamanho do\n    local caractere = texto:sub(i, i)\n    print(caractere)\nend\n</code></pre> <pre><code>O\nl\n\u00e1\n,\n\nL\nu\na\n!\n</code></pre>"},{"location":"Lua%20Guide/Basics/misc/","title":"Outros Operadores em Lua","text":"<p>Al\u00e9m dos operadores l\u00f3gicos discutidos anteriormente, Lua tamb\u00e9m possui outros operadores \u00fateis que podem ser usados em express\u00f5es. Vamos explorar dois desses operadores: o operador de concatena\u00e7\u00e3o (<code>..</code>) e o operador de comprimento (<code>#</code>).</p>"},{"location":"Lua%20Guide/Basics/misc/#operador-de-concatenacao","title":"Operador de Concatena\u00e7\u00e3o (..)","text":"<p>O operador de concatena\u00e7\u00e3o (<code>..</code>) \u00e9 usado para combinar duas strings em uma \u00fanica string. Ele permite que voc\u00ea junte o conte\u00fado de duas vari\u00e1veis \u200b\u200bou strings literais em uma \u00fanica string.</p> LuaConsole <pre><code>local str1 = \"Hello\"\nlocal str2 = \" World\"\nlocal result = str1 .. str2\n\nprint(result)\n</code></pre> <pre><code>Hello World\n</code></pre>"},{"location":"Lua%20Guide/Basics/misc/#operador-de-comprimento","title":"Operador de Comprimento (#)","text":"<p>O operador de comprimento (<code>#</code>) \u00e9 usado para obter o tamanho de uma string ou o n\u00famero de elementos em uma tabela. Ele retorna o comprimento da string ou o n\u00famero de elementos contidos na tabela.</p> <p>Exemplo com string:</p> LuaConsole <pre><code>local str = \"Hello\"\nlocal length = #str\n\nprint(length)\n</code></pre> <pre><code>5\n</code></pre> <p>Exemplo com tabela:</p> LuaConsole <pre><code>local tbl = {10, 20, 30, 40, 50}\nlocal size = #tbl\n\nprint(size)\n</code></pre> <pre><code>5\n</code></pre>"},{"location":"Lua%20Guide/Basics/relational/","title":"Operadores Relacionais","text":"<p>Operadores relacionais compara dois valores e sempre retorna um valor <code>boolean</code> como resultado. Esses operadores testam sobre igualdade e diferen\u00e7a e quais dos argumentos \u00e9 menor ou maior que o outro.</p> <p>Info</p> <p>Os operadores de relacionais s\u00e3o comumente usados em estruturas de controle condicional para tomar decis\u00f5es com base nas compara\u00e7\u00f5es de valores.</p>"},{"location":"Lua%20Guide/Basics/relational/#operador-de-igualdade","title":"Operador de igualdade (==)","text":"<p>O operador de igualdade (<code>==</code>) compara se o valor \u00e0 esquerda \u00e9 igual ao valor da \u00e0 direita. Retorna <code>true</code> se a compara\u00e7\u00e3o for verdadeira e <code>false</code> caso contr\u00e1rio.</p> LuaConsole <pre><code>local x = 2 == 2\nlocal y = \"a\" == \"b\"\nlocal z = \"a\" == \"a\"\n\nprint(x)\nprint(y)\nprint(z)\n</code></pre> <pre><code>true\nfalse\ntrue\n</code></pre> <p>No exemplo acima, <code>x</code> \u00e9 <code>true</code> porque 2 \u00e9 igual a 2. <code>y</code> \u00e9 <code>false</code> porque \"a\" n\u00e3o \u00e9 igual a \"b\". <code>z</code> \u00e9 <code>true</code> porque \"a\" \u00e9 igual a \"a\".</p>"},{"location":"Lua%20Guide/Basics/relational/#operador-de-diferenca","title":"Operador de diferen\u00e7a (~=)","text":"<p>O operador de diferen\u00e7a (<code>~=</code>) compara se o valor \u00e0 esquerda \u00e9 diferente do valor \u00e0 direita. Retorna <code>true</code> se a compara\u00e7\u00e3o for verdadeira e <code>false</code> caso contr\u00e1rio.</p> LuaConsole <pre><code>local x = 2 ~= 2\nlocal y = \"a\" ~= \"b\"\nlocal z = \"a\" ~= \"a\"\n\nprint(x)\nprint(y)\nprint(z)\n</code></pre> <pre><code>false\ntrue\nfalse\n</code></pre>"},{"location":"Lua%20Guide/Basics/relational/#operador-de-maior-que-e-menor-que","title":"Operador de maior que (&gt;) e menor que (&lt;)","text":"<p>O operador de maior que (<code>&gt;</code>) compara se o valor \u00e0 esquerda \u00e9 estritamente maior que o valor \u00e0 direita. Retorna <code>true</code> se a compara\u00e7\u00e3o for verdadeira e <code>false</code> caso contr\u00e1rio.</p> <p>O operador de menor que (<code>&lt;</code>) compara se o valor esquerda estritamente menor que o valor direita. Retorna <code>true</code> se a compara o for verdadeira e <code>false</code> caso contr\u00e1rio.</p> LuaConsole <pre><code>local x = 5 &gt; 2\nlocal y = 3 &lt; 1\nlocal z = \"lua\" &gt; \"Lua\"\n\nprint(x)\nprint(y)\nprint(z)\n</code></pre> <pre><code>true\nfalse\ntrue\n</code></pre> <p>No exemplo acima, <code>x</code> \u00e9 <code>true</code> porque 5 \u00e9 maior que 2. <code>y</code> \u00e9 <code>false</code> porque 3 n\u00e3o \u00e9 menor que 1, <code>z</code> \u00e9 <code>true</code> porque na compara\u00e7\u00e3o de strings, a ordem lexicogr\u00e1fica \u00e9 levada em considera\u00e7\u00e3o, e \"lua\" \u00e9 considerado maior que \"Lua\" nesse caso.</p>"},{"location":"Lua%20Guide/Basics/relational/#operador-de-maior-ou-igual-e-menor-ou-igual","title":"Operador de maior ou igual (&gt;=) e menor ou igual (&lt;=)","text":"<p>O operador de maior ou igual (<code>&gt;=</code>) compara se o valor \u00e0 esquerda \u00e9 maior ou igual ao valor \u00e0 direita. Retorna <code>true</code> se a compara\u00e7\u00e3o for verdadeira e <code>false</code> caso contr\u00e1rio.</p> <p>O operador de menor ou (<code>&lt;=</code>) compara se o valor \u00e0 esquerda \u00e9 menor ou igual ao valor \u00e0 direita. Retorna <code>true</code> se a compara\u00e7\u00e3o for verdadeira e <code>false</code> caso contr\u00e1rio.</p> LuaConsole <pre><code>local x = 5 &gt;= 2\nlocal y = 3 &lt;= 1\nlocal z = \"lua\" &gt;= \"Lua\"\n\nprint(x)\nprint(y)\nprint(z)\n</code></pre> <pre><code>true\nfalse\ntrue\n</code></pre> <p>No exemplo acima, <code>x</code> \u00e9 <code>true</code> porque 5 \u00e9 maior ou igual a 2. <code>y</code> \u00e9 <code>false</code> porque 3 n\u00e3o \u00e9 menor ou igual a 1. <code>z</code> \u00e9 <code>true</code> porque na compara\u00e7\u00e3o de strings, a ordem lexicogr\u00e1fica \u00e9 levada em considera\u00e7\u00e3o, e \"lua\" \u00e9 considerado maior ou igual a \"Lua\" nesse caso.</p>"},{"location":"Lua%20Guide/Basics/strings/","title":"String","text":"<p>Uma string em Lua \u00e9 uma sequ\u00eancia de caracteres. Ela \u00e9 frequentemente usada para representar palavras, frases e textos em geral.</p>"},{"location":"Lua%20Guide/Basics/strings/#tamanho-da-string","title":"Tamanho da String","text":"<p>Para obter o tamanho de uma string em Lua, voc\u00ea pode utilizar o operador de comprimento <code>#</code> ou a fun\u00e7\u00e3o <code>string.len()</code>.</p> <p>Neste exemplo, a vari\u00e1vel hello cont\u00e9m a string <code>\"Ol\u00e1, mundo\"</code>. Usando o operador <code>#</code>, podemos obter o tamanho da string e armazen\u00e1-lo na vari\u00e1vel length. Da mesma forma, a fun\u00e7\u00e3o <code>string.len()</code> tamb\u00e9m retorna o tamanho da string. Ambos os valores s\u00e3o impressos no console usando a fun\u00e7\u00e3o <code>print()</code>.</p> LuaConsole <pre><code>local hello = \"Ol\u00e1, mundo\"\nlocal length = #hello\nlocal length2 = string.len(hello)\n\nprint(string.format(\"Tamanho da string: %s\", length))\nprint(string.format(\"Tamanho da string: %s\", length2))\n</code></pre> <pre><code>Tamanho da string: 11\nTamanho da string: 11\n</code></pre>"},{"location":"Lua%20Guide/Basics/strings/#concatenacao-de-strings-e-stringformat","title":"Concatena\u00e7\u00e3o de strings e string.format()","text":"<p>Em Lua, a concatena\u00e7\u00e3o de strings \u00e9 realizada utilizando o operador de concatena\u00e7\u00e3o (<code>..</code>). Esse operador permite combinar duas ou mais strings em uma \u00fanica string.</p> LuaConsole <pre><code>local str = \"Lua\"\nstr = str .. \" programming\"\nprint(str)\n</code></pre> <pre><code>Lua programming\n</code></pre> <p>Al\u00e9m da concatena\u00e7\u00e3o, voc\u00ea tamb\u00e9m pode usar a fun\u00e7\u00e3o <code>string.format</code> para formatar strings em Lua. Essa fun\u00e7\u00e3o permite combinar valores e strings formatadas em uma \u00fanica string, seguindo um padr\u00e3o definido.</p> Especificador Descri\u00e7\u00e3o <code>%s</code> Formata o argumento como uma string <code>%d</code> Formata o argumento como um n\u00famero decimal inteiro <code>%f</code> Formata o argumento como um n\u00famero de ponto flutuante <code>%c</code> Formata o argumento como um caractere ASCII <code>%o</code> Formata o argumento como um n\u00famero octal <code>%x</code> ou <code>%X</code> Formata o argumento como um n\u00famero hexadecimal <code>%%</code> Insere um caractere de porcentagem literal (<code>%</code>) na string <p>Exemplo:</p> LuaConsole <pre><code>local name = \"Alice\"\nlocal age = 25\nlocal message = string.format(\"Ol\u00e1, meu nome \u00e9 %s e eu tenho %d anos.\", name, age)\nprint(message)\n</code></pre> <pre><code>Ol\u00e1, meu nome \u00e9 Alice e eu tenho 25 anos.\n</code></pre>"},{"location":"Lua%20Guide/Basics/strings/#coercao-de-strings","title":"Coer\u00e7\u00e3o de Strings","text":"<p>Em Lua, a coer\u00e7\u00e3o de strings \u00e9 o processo de converter outros tipos de dados em strings. Isso pode ser \u00fatil em situa\u00e7\u00f5es em que voc\u00ea precisa representar um valor n\u00e3o string como uma string.</p> <p>Existem v\u00e1rias maneiras de realizar a coer\u00e7\u00e3o de strings em Lua:</p> <p>Concatena\u00e7\u00e3o Impl\u00edcita: Uma forma comum de coer\u00e7\u00e3o de strings \u00e9 atrav\u00e9s da concatena\u00e7\u00e3o impl\u00edcita. Quando voc\u00ea usa o operador de concatena\u00e7\u00e3o (<code>..</code>) para combinar uma string com outro tipo de dado, Lua automaticamente converte o valor para uma string.</p> LuaConsole <pre><code>local number = 42\nlocal str = \"O n\u00famero \u00e9: \" .. number\nprint(str)\n</code></pre> <pre><code>O n\u00famero \u00e9: 42\n</code></pre> <p>Nesse exemplo, o valor da vari\u00e1vel number \u00e9 implicitamente convertido para uma string durante a concatena\u00e7\u00e3o com a string <code>\"O n\u00famero \u00e9: \"</code>. O resultado \u00e9 a string final <code>\"O n\u00famero \u00e9: 42\"</code>.</p> <p>Fun\u00e7\u00e3o tostring: Outra forma de realizar a coer\u00e7\u00e3o de strings \u00e9 utilizando a fun\u00e7\u00e3o <code>tostring()</code>. Essa fun\u00e7\u00e3o converte explicitamente um valor para sua representa\u00e7\u00e3o em string.</p> LuaConsole <pre><code>local boolean = true\nlocal str = \"O valor booleano \u00e9: \" .. tostring(boolean)\nprint(str)\n</code></pre> <pre><code>O valor booleano \u00e9: true\n</code></pre>"},{"location":"Lua%20Guide/Basics/strings/#caracteres-de-escape","title":"Caracteres de Escape","text":"<p>Em Lua, os caracteres de escape s\u00e3o usados para representar caracteres especiais dentro de uma string. Eles permitem que voc\u00ea inclua caracteres que, de outra forma, teriam um significado especial na linguagem.</p> <p>Aqui est\u00e3o alguns exemplos de caracteres de escape comumente usados em Lua:</p> <ul> <li>\\n - Nova linha</li> <li>\\t - Tabula\u00e7\u00e3o</li> <li>\\\" - Aspas duplas</li> <li>\\' - Aspas simples</li> <li>\\ - Barra invertida</li> </ul> <p>Exemplo:</p> LuaConsole <pre><code>local message = 'Ele disse \"tchau\" e foi embora'\nprint(message)\n</code></pre> <pre><code>Ele disse \"tchau\" e foi embora\n</code></pre> <p>Nesse exemplo, as aspas duplas dentro da string s\u00e3o precedidas por uma barra invertida \\ para que sejam tratadas como parte do texto, e n\u00e3o como o fim da string.</p> <p>Voc\u00ea tamb\u00e9m pode usar aspas duplas em vez de aspas simples para evitar a necessidade de escapar as aspas dentro da string</p> <p>A sa\u00edda ser\u00e1 a mesma:</p> LuaConsole <pre><code>local message = \"Ele disse \\\"tchau\\\" e foi embora\"\nprint(message)\n</code></pre> <pre><code>Ele disse \"tchau\" e foi embora\n</code></pre>"},{"location":"Lua%20Guide/Basics/types/","title":"Tipos de Dados","text":"<p>Em Lua, existem v\u00e1rios tipos de dados que voc\u00ea pode utilizar para armazenar e manipular informa\u00e7\u00f5es. Vamos explorar alguns dos principais tipos de dados em Lua:</p>"},{"location":"Lua%20Guide/Basics/types/#nil","title":"nil","text":"<p>O tipo de dado nil representa a aus\u00eancia de dados. Ele \u00e9 utilizado quando um determinado valor \u00e9 inv\u00e1lido, desconhecido ou n\u00e3o existe. O nil \u00e9 a melhor maneira de representar que algo \u00e9 inv\u00e1lido ou desconhecido.</p> LuaConsole <pre><code>local foo\nlocal bar = type(foo)\n\nprint(foo)\nprint(bar)\n</code></pre> <pre><code>nil\nnil\n</code></pre>"},{"location":"Lua%20Guide/Basics/types/#boolean","title":"boolean","text":"<p>O tipo de dado booleano representa um valor verdadeiro (true) ou falso (false). \u00c9 um valor bin\u00e1rio e s\u00f3 pode estar em um dos dois estados poss\u00edveis, verdadeiro ou falso.</p> LuaConsole <pre><code>local foo = true\nlocal bar = type(foo)\n\nif foo then\n    print(\"true\")\nend\n\nprint(bar)\n</code></pre> <pre><code>true\nboolean\n</code></pre>"},{"location":"Lua%20Guide/Basics/types/#number","title":"number","text":"<p>O tipo de dado number representa n\u00fameros reais. Pode representar qualquer n\u00famero real, incluindo zero, n\u00fameros negativos, inteiros e decimais.</p> LuaConsole <pre><code>local x = 10\nlocal y = 5.5\nlocal bx = type(x)\nlocal by = type(y)\n\nprint(x + y) -- 15.5\nprint(bx, math.type(x))\nprint(by, math.type(u))\n</code></pre> <pre><code>15.5\nnumber, integer\nnumber, float\n</code></pre>"},{"location":"Lua%20Guide/Basics/types/#string","title":"string","text":"<p>Uma string \u00e9 uma sequ\u00eancia de caracteres. Ao declarar uma string literal, ela deve ser \"delimitada por aspas\". As strings permitem armazenar e manipular texto.</p> LuaConsole <pre><code>local foo = \"foo\"\nlocal bar = type(foo)\n\nprint(foo)\nprint(bar)\n</code></pre> <pre><code>foo\nstring\n</code></pre>"},{"location":"Lua%20Guide/Basics/types/#function","title":"function","text":"<p>Uma fun\u00e7\u00e3o \u00e9 um bloco de c\u00f3digo que \u00e9 identificado por um nome e pode ser executado em qualquer momento. Fun\u00e7\u00f5es permitem que voc\u00ea organize e reutilize o c\u00f3digo de maneira eficiente.</p> LuaConsole <pre><code>local function add(x, y)\n    return x + y\nend\n\nlocal x = 1\nlocal y = 2\nlocal result = add(x, y)\n\nprint(result) -- 3\nprint(type(add)) -- function\n</code></pre> <pre><code>3\nfunction\n</code></pre>"},{"location":"Lua%20Guide/Basics/types/#table","title":"table","text":"<p>Uma tabela \u00e9 uma estrutura de dados que armazena informa\u00e7\u00f5es utilizando pares de chave e valor.</p> LuaConsole <pre><code>local fruits = { \"apple\", \"ice cream\", \"orange\" }\n\nprint(fruits[1]) -- apple\nprint(fruits[2]) -- ice cream\nprint(fruits[3]) -- orange\n</code></pre> <pre><code>apple\nice cream\norange\n</code></pre>"},{"location":"Lua%20Guide/Basics/types/#userdata","title":"userdata","text":"<p>O tipo de dado userdata permite a cria\u00e7\u00e3o de estruturas de dados complexas definidas na linguagem de programa\u00e7\u00e3o C. Essas estruturas s\u00e3o utilizadas para interagir com recursos de sistema ou bibliotecas externas.</p>"},{"location":"Lua%20Guide/Basics/types/#thread","title":"thread","text":"<p>Threads s\u00e3o utilizadas para executar c\u00f3digo de forma paralela. Em vez de executar um conjunto de comandos por vez, as threads permitem executar v\u00e1rios conjuntos de comandos simultaneamente.</p> <p>Esses s\u00e3o apenas alguns dos tipos de dados dispon\u00edveis em Lua. Cada tipo de dado tem suas caracter\u00edsticas e utiliza\u00e7\u00f5es espec\u00edficas, permitindo que voc\u00ea manipule informa\u00e7\u00f5es de maneira eficiente e flex\u00edvel em seus programas.</p>"},{"location":"Lua%20Guide/Basics/variables/","title":"Criando Vari\u00e1veis","text":"<p>Em Lua, voc\u00ea pode criar vari\u00e1veis para armazenar e manipular dados. Declarar uma vari\u00e1vel \u00e9 simples. Vamos ver um exemplo:</p> <pre><code>local mensagem = \"Ol\u00e1, mundo\"\n</code></pre> <p>No trecho de c\u00f3digo acima, declaramos uma vari\u00e1vel chamada <code>mensagem</code> usando a palavra-chave local. A palavra-chave local indica que a vari\u00e1vel possui escopo local e s\u00f3 \u00e9 acess\u00edvel dentro do bloco ou fun\u00e7\u00e3o atual.</p> <p>Inicializamos a vari\u00e1vel <code>mensagem</code> com o valor da string \"Ol\u00e1, mundo\". Lua \u00e9 uma linguagem de tipagem din\u00e2mica, o que significa que voc\u00ea n\u00e3o precisa especificar explicitamente o tipo de dado ao declarar uma vari\u00e1vel. O tipo da vari\u00e1vel \u00e9 determinado com base no valor atribu\u00eddo a ela.</p> <p>Uma vez que a vari\u00e1vel \u00e9 declarada, voc\u00ea pode us\u00e1-la em seu c\u00f3digo. Por exemplo, voc\u00ea pode imprimir o valor da vari\u00e1vel <code>mensagem</code> usando a fun\u00e7\u00e3o print:</p> LuaConsole <pre><code>print(mensagem)\n</code></pre> <pre><code>Ol\u00e1 mundo\n</code></pre> <p>Em Lua, as vari\u00e1veis podem armazenar diferentes tipos de valores, como n\u00fameros, strings, booleanos, tabelas e outros.</p> <p>Tip</p> <p>Lembre-se de escolher nomes significativos e descritivos para suas vari\u00e1veis, a fim de melhorar a legibilidade e a manuten\u00e7\u00e3o do c\u00f3digo.</p>"},{"location":"Lua%20Guide/Basics/variables/#variaveis-globais","title":"Vari\u00e1veis Globais","text":"<p>Em Lua, uma vari\u00e1vel global \u00e9 uma vari\u00e1vel que pode ser acessada e modificada em qualquer parte do c\u00f3digo, independentemente de seu escopo. Isso significa que ela est\u00e1 dispon\u00edvel em todo o programa, mesmo fora do bloco ou fun\u00e7\u00e3o onde foi originalmente declarada.</p> <p>Aqui est\u00e1 um exemplo de declara\u00e7\u00e3o de uma vari\u00e1vel global:</p> <pre><code>mensagem = \"Ol\u00e1, mundo!\"\n</code></pre> <p>Tip</p> <p>Quando uma vari\u00e1vel global \u00e9 atribu\u00edda, ela mant\u00e9m seu valor at\u00e9 que seja alterada ou o programa termine sua execu\u00e7\u00e3o.</p>"},{"location":"Lua%20Guide/Basics/variables/#escopo","title":"Escopo","text":"<p>Em Lua, o escopo define a visibilidade e a acessibilidade de uma vari\u00e1vel. O escopo pode ser local ou global.</p> <p>Vari\u00e1veis Locais: Essas vari\u00e1veis est\u00e3o vis\u00edveis e acess\u00edveis apenas dentro do bloco ou fun\u00e7\u00e3o em que foram declaradas.</p> LuaConsole <pre><code>do\n    local mensagem = \"Ol\u00e1, mundo!\"\n    print(mensagem)\nend\n\ndo\n    print(mensagem)\nend\n</code></pre> <pre><code>Ol\u00e1, mundo!\nnil\n</code></pre> <p>No primeiro bloco, a vari\u00e1vel <code>mensagem</code> \u00e9 declarada como uma vari\u00e1vel local dentro do bloco <code>do</code>. Ela pode ser usada dentro desse bloco e \u00e9 impressa corretamente.</p> <p>No segundo bloco, ao tentar acessar a vari\u00e1vel mensagem, o print mostra <code>nil</code> porque ela n\u00e3o est\u00e1 definida nesse escopo.</p> <p>Vari\u00e1veis Globais: Vari\u00e1veis globais s\u00e3o declaradas sem o uso da palavra-chave local. Elas podem ser acessadas e modificadas em qualquer parte do programa.</p> LuaConsole <pre><code>do\n    mensagem = \"Ol\u00e1, mundo\"\nend\n\ndo\n    print(mensagem)\nend\n</code></pre> <pre><code>Ol\u00e1, mundo\n</code></pre> <p>No exemplo acima, a vari\u00e1vel mensagem \u00e9 declarada sem a palavra-chave <code>local</code>. Portanto, ela se torna uma vari\u00e1vel global. Ela pode ser acessada e impressa em qualquer parte do programa, incluindo fora do bloco onde foi declarada.</p> <p>Warning</p> <p>O uso excessivo de vari\u00e1veis globais pode poluir o espa\u00e7o global do programa, tornando-o confuso e dif\u00edcil de gerenciar. Isso pode dificultar a manuten\u00e7\u00e3o e a compreens\u00e3o do c\u00f3digo, at\u00e9 dificultando o rastreamento de bugs.</p>"},{"location":"Lua%20Guide/Getting%20Started/","title":"Introdu\u00e7\u00e3o a linguagem Lua","text":"<p>Lua \u00e9 uma linguagem de programa\u00e7\u00e3o poderosa, eficiente e leve, projetada para estender aplica\u00e7\u00f5es. Ela permite programa\u00e7\u00e3o procedural, programa\u00e7\u00e3o orientada a objetos, programa\u00e7\u00e3o funcional, programa\u00e7\u00e3o orientada a dados e descri\u00e7\u00e3o de dados.</p> <p>fonte</p> Exemplo 1Exemplo 2 <pre><code>function sum(a, b)\n    return a + b\nend\n\nlocal n1, n2 = 1, 2\nlocal result = sum(n1, n2)\nprint(string.format(\"%s + %s = %s\", n1, n2, result))\n</code></pre> <pre><code>local Person = {}\n\nfunction Person:new(obj)\n    setmetatable(obj, self)\n    self.__index = self\n\n    return obj\nend\n\nlocal person = Person:new({ name = \"Max\", age = 17 })\n\nprint(\"Name: \" .. person.name)\nprint(\"Age: \" .. person.age)\n</code></pre>"},{"location":"Lua%20Guide/Getting%20Started/first-program/","title":"Primeiro Programa","text":"<p>\u00c9 uma pr\u00e1tica comum iniciar o aprendizado de uma nova linguagem de programa\u00e7\u00e3o com o famoso <code>\"Hello World\"</code>. No Lua, isso \u00e9 bastante simples. Basta chamar a fun\u00e7\u00e3o print e passar como par\u00e2metro o que voc\u00ea deseja exibir na tela.</p> LuaC <pre><code>print(\"Ol\u00e1, mundo!\")\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n  puts(\"Hello World\");\n\n  return 0;\n}\n</code></pre> <p>Como o rodar o seu primeiro programa:</p> LuaC <pre><code>lua init.lua\n</code></pre> <pre><code>gcc main.c -o main\n./main\n</code></pre> <p>Em contraste, ao programar em C, o c\u00f3digo do programa \"Hello World\" \u00e9 estruturado dentro de uma fun\u00e7\u00e3o chamada main. Nesse exemplo em C, utilizamos a biblioteca <code>&lt;stdio.h&gt;</code> para acessar a fun\u00e7\u00e3o <code>puts</code>, que \u00e9 respons\u00e1vel por exibir uma mensagem na tela.</p> <p>Dentro da fun\u00e7\u00e3o main, chamamos a fun\u00e7\u00e3o puts e passamos como argumento a mensagem \"Hello World\". Essa mensagem ser\u00e1 exibida no console quando o programa for executado.</p> <p>Por fim, utilizamos a instru\u00e7\u00e3o <code>return 0;</code> para indicar que o programa foi executado corretamente. O valor zero \u00e9 comumente utilizado para indicar sucesso na execu\u00e7\u00e3o do programa, embora outros valores possam ser usados para sinalizar diferentes situa\u00e7\u00f5es de sa\u00edda.</p>"},{"location":"Lua%20Guide/Getting%20Started/ide/","title":"Escolhendo uma IDE","text":"<p>Existem v\u00e1rias op\u00e7\u00f5es dispon\u00edveis, mas eu recomendo o Visual Studio Code como a IDE ideal. \u00c9 uma op\u00e7\u00e3o gratuita e f\u00e1cil de usar, oferecendo diversas extens\u00f5es que podem auxiliar na programa\u00e7\u00e3o.</p> <p>Ap\u00f3s instalar o Visual Studio Code, voc\u00ea pode aprimorar sua experi\u00eancia instalando as seguintes extens\u00f5es:</p> <ul> <li>Sumneko   Um servidor LSP (Language Server Protocol) para Lua.</li> <li>Stylua   Um formatador de c\u00f3digo para Lua.</li> <li>Onedarkpro   Um esquema de cores (colorscheme) chamado Onedarkpro, que ser\u00e1 utilizado nos   exemplos.</li> </ul>"},{"location":"Lua%20Guide/Getting%20Started/installation/","title":"Instalando Lua","text":"<p>Para instalar o Lua no Linux, voc\u00ea pode usar o gerenciador de pacotes de sua distro.</p> ArchLinuxUbuntuFedoraNixOS <pre><code>paru -S lua 5.4.6-1\n</code></pre> <pre><code>sudo apt install lua5.4\n</code></pre> <pre><code>sudo dnf install lua\n</code></pre> <pre><code>nix-env -iA nixos.lua\n</code></pre>"},{"location":"Lua%20Guide/Getting%20Started/installation/#windows","title":"Windows","text":"<p>Para instalar o Lua no Windows, siga os seguintes passos:</p> <ol> <li>Acesse o site do Lua em lua.org e    v\u00e1 para a se\u00e7\u00e3o de Downloads.</li> <li>Fa\u00e7a o download do pacote bin\u00e1rio do Lua para Windows, compat\u00edvel com a    arquitetura do seu sistema (32 bits ou 64 bits).</li> <li>Extraia o pacote baixado para um local de sua escolha.</li> <li>Adicione o diret\u00f3rio execut\u00e1vel do Lua ao PATH do sistema. Isso permitir\u00e1    que voc\u00ea execute o Lua a partir de qualquer prompt de comando.</li> <li>Abra um prompt de comando e digite lua -v para verificar se o Lua est\u00e1</li> </ol> <p>Um alternativa \u00e9 utilizar o scoop para instalar o lua.</p> <pre><code>scoop bucket add main\n</code></pre> <pre><code>scoop install main/lua\n</code></pre> <p>Bug</p> <p>A fun\u00e7\u00e3o <code>require</code> \u00e9 usada em Lua para carregar e utilizar m\u00f3dulos externos. Ela permite que voc\u00ea importe e utilize funcionalidades de outros arquivos Lua em seu programa, algumas vers\u00f5es do Lua no ambiente Windows podem ter problemas com a fun\u00e7\u00e3o <code>require</code>. Isso pode ocorrer devido a configura\u00e7\u00f5es espec\u00edficas do ambiente</p>"},{"location":"Lua%20Guide/Getting%20Started/installation/#macos","title":"macOs","text":"<p>Para instalar o Lua no macOS, voc\u00ea pode usar o gerenciador de pacotes Homebrew.</p> HomebrewNix <pre><code>brew install lua\n</code></pre> <pre><code>nix-env -iA nixpkgs.lua\n</code></pre> <p>Ap\u00f3s a conclus\u00e3o da instala\u00e7\u00e3o, voc\u00ea pode verificar se tudo ocorreu corretamente digitando <code>lua -v</code> no Terminal. A vers\u00e3o do Lua dever\u00e1 ser exibida.</p>"},{"location":"Lua%20Guide/Lua%20Library/math/","title":"Biblioteca Math","text":"<p>A biblioteca <code>math</code> em Lua fornece v\u00e1rias fun\u00e7\u00f5es matem\u00e1ticas. Essas fun\u00e7\u00f5es s\u00e3o \u00fateis para lidar com opera\u00e7\u00f5es trigonom\u00e9tricas, convers\u00f5es de graus e radianos, valores absolutos, gera\u00e7\u00e3o de n\u00fameros aleat\u00f3rios.</p>"},{"location":"Lua%20Guide/Lua%20Library/math/#mathacos","title":"Math.acos","text":"<p>A Fun\u00e7\u00e3o <code>math.acos</code> retorna o arco cosseno de um valor, em radianos.</p>"},{"location":"Lua%20Guide/Lua%20Library/math/#mathasin","title":"Math.asin","text":"<p>A fun\u00e7\u00e3o <code>math.asin</code> retorna o arco seno de um valor, em radianos</p>"},{"location":"Lua%20Guide/Lua%20Library/math/#mathatan","title":"Math.atan","text":"<p>A fun\u00e7\u00e3o <code>math.atan</code> retorna o arco tangente de um valor, em radianos</p>"},{"location":"Lua%20Guide/Lua%20Library/math/#mathcos","title":"Math.cos","text":"<p>A fun\u00e7\u00e3o <code>math.cos</code> retorna o cosseno de um valor, em radianos</p>"},{"location":"Lua%20Guide/Lua%20Library/math/#mathsin","title":"Math.sin","text":"<p>A fun\u00e7\u00e3o <code>math.sin</code> retorna o seno de um valor, em radianos</p>"},{"location":"Lua%20Guide/Lua%20Library/math/#mathtan","title":"Math.tan","text":"<p>A fun\u00e7\u00e3o <code>math.tan</code> retorna a tangente de um valor, em radianos</p>"},{"location":"Lua%20Guide/Lua%20Library/math/#mathdeg","title":"Math.deg","text":"<p>A fun\u00e7\u00e3o <code>math.deg</code> converte um valor de radianos para graus.</p>"},{"location":"Lua%20Guide/Lua%20Library/math/#mathrad","title":"Math.rad","text":"<p>A fun\u00e7\u00e3o <code>math.rad</code> converte um valor de graus para radianos</p>"},{"location":"Lua%20Guide/Lua%20Library/math/#mathabs","title":"Math.abs","text":"<p>A fun\u00e7\u00e3o <code>math.abs</code> retorna o valor absoluto de um n\u00famero</p>"},{"location":"Lua%20Guide/Lua%20Library/math/#mathtointerger","title":"Math.tointerger","text":"<p>A fun\u00e7\u00e3o <code>math.tointerger</code> converte um valor para um n\u00famero inteiro, truncando a parte decimal.</p>"},{"location":"Lua%20Guide/Lua%20Library/math/#mathmax","title":"Math.max","text":"<p>A fun\u00e7\u00e3o <code>math.max(x, y)</code> retorna o maior valor entre dois ou mais valores fornecidos.</p>"},{"location":"Lua%20Guide/Lua%20Library/math/#mathmin","title":"Math.min","text":"<p>A fun\u00e7\u00e3o <code>math.min(x, y)</code> retorna o menor valor entre dois ou mais valores fornecidos.</p>"},{"location":"Lua%20Guide/Lua%20Library/math/#mathult","title":"Math.ult","text":"<p>A fun\u00e7\u00e3o <code>math.ult(x, y)</code> retorna <code>true</code> se o valor de <code>x</code> for menor que o valor de <code>y</code></p> <pre><code>local x = 10\nlocal y = 15\n\nif math.ult(x, y) then\n    print(\"x \u00e9 menor que y\")\nelse\n    print(\"x n\u00e3o \u00e9 menor que y\")\nend\n</code></pre>"},{"location":"Lua%20Guide/Lua%20Library/math/#mathrandom","title":"Math.random","text":"<p>A fun\u00e7\u00e3o <code>math.random(min, max)</code> retorna um n\u00famero aleat\u00f3rio entre 0 e 1.</p> <pre><code>math.randomseed(os.time())\n\nlocal numeroAleatorio1 = math.random(1, 10)\nlocal numeroAleatorio2 = math.random(1, 10)\n\nprint(numeroAleatorio1, numeroAleatorio2)\n</code></pre>"},{"location":"Lua%20Guide/Lua%20Library/string/","title":"Biblioteca String","text":"<p>O poder de um interpretador Lua bruto para manipular strings \u00e9 bastante limitado. Um programa pode criar literais de strings e concaten\u00e1-las. Mas ele n\u00e3o pode extrair uma subcadeia, verificar seu tamanho ou examinar seu conte\u00fado. Todo o poder de manipula\u00e7\u00e3o de strings em Lua vem de sua biblioteca de strings.</p>"},{"location":"Lua%20Guide/Lua%20Library/string/#extrair-parte-da-string-stringsub","title":"Extrair parte da string (String.sub)","text":"<p>A fun\u00e7\u00e3o <code>string.sub</code> \u00e9 usada para extrair uma parte espec\u00edfica de uma string. Ela recebe tr\u00eas argumentos: a string original, o \u00edndice inicial e o \u00edndice final. Retorna a parte da string compreendida entre os \u00edndices inicial e final.</p> <p>Exemplo de uso:</p> LuaConsole <pre><code>local mensagem = \"Ol\u00e1, mundo!\"\nlocal parte = string.sub(mensagem, 1, 4)\n\nprint(parte)\n</code></pre> <pre><code>Ol\u00e1\n</code></pre> <p>Neste exemplo, a fun\u00e7\u00e3o <code>string.sub</code> \u00e9 usada para extrair os primeiros quatro caracteres da string mensagem e armazen\u00e1-los na vari\u00e1vel <code>parte</code>.</p> <p>Warning</p> <p>Quando voc\u00ea tenta modificar uma string, uma nova string \u00e9 criada em um novo endere\u00e7o de mem\u00f3ria, com o valor modificado, enquanto a string original permanece inalterada em seu endere\u00e7o de mem\u00f3ria original. Isso ocorre porque as strings em Lua s\u00e3o imut\u00e1veis, ou seja, uma vez que uma string \u00e9 criada, seu conte\u00fado n\u00e3o pode ser alterado diretamente.</p>"},{"location":"Lua%20Guide/Lua%20Library/string/#encontrar-ocorrencia-em-uma-string-stringfind","title":"Encontrar ocorr\u00eancia em uma string (string.find)","text":"<p>A fun\u00e7\u00e3o <code>string.find</code> \u00e9 usada para encontrar a primeira ocorr\u00eancia de um padr\u00e3o em uma string. Ela recebe dois argumentos: a string original e o padr\u00e3o a ser buscado. Retorna os \u00edndices inicial e final da primeira ocorr\u00eancia do padr\u00e3o na string.</p> <p>Exemplo de uso:</p> LuaConsole <pre><code>local mensagem = \"Ol\u00e1, Lua!\"\nlocal inicio, fim = string.find(mensagem, \"Lua\")\n</code></pre> <pre><code>7 9\n</code></pre> <p>Neste exemplo, a fun\u00e7\u00e3o <code>string.find</code> \u00e9 usada para encontrar a primeira ocorr\u00eancia da palavra \"Lua\" na string <code>mensagem</code>. Os \u00edndices inicial e final da ocorr\u00eancia s\u00e3o armazenados nas vari\u00e1veis <code>inicio</code> e <code>fim</code>, respectivamente.</p>"},{"location":"Lua%20Guide/Lua%20Library/string/#deixar-string-em-maiusculas-stringupper","title":"Deixar string em mai\u00fasculas (string.upper)","text":"<p>A fun\u00e7\u00e3o <code>string.upper</code> \u00e9 usada para converter todos os caracteres de uma string em letras mai\u00fasculas.</p> <p>Exemplo de uso:</p> LuaConsole <pre><code>local palavra = \"lua\"\nlocal palavra_maiuscula = string.upper(palavra)\n\nprint(palavra_maiuscula)\n</code></pre> <pre><code>LUA\n</code></pre> <p>Neste exemplo, a fun\u00e7\u00e3o <code>string.upper</code> \u00e9 usada para converter a string <code>palavra</code> em letras mai\u00fasculas e armazen\u00e1-la na vari\u00e1vel <code>palavra_maiuscula</code>.</p>"},{"location":"Lua%20Guide/Lua%20Library/string/#deixar-string-em-minuscula-stringlower","title":"Deixar string em min\u00fascula (string.lower)","text":"<p>A fun\u00e7\u00e3o string.lower \u00e9 usada para converter todos os caracteres de uma string em letras min\u00fasculas.</p> <p>Exemplo de uso:</p> LuaConsole <pre><code>local palavra = \"LUA\"\nlocal palavra_minuscula = string.lower(palavra)\nprint(palavra_minuscula)  -- Sa\u00edda: \"lua\"\n</code></pre> <pre><code>lua\n</code></pre> <p>Neste exemplo, a fun\u00e7\u00e3o <code>string.lower</code> \u00e9 usada para converter a string <code>palavra</code> em letras min\u00fasculas e armazen\u00e1-la na vari\u00e1vel <code>palavra_minuscula</code>.</p>"},{"location":"Lua%20Guide/Lua%20Library/string/#inverter-os-caracters-de-uma-string-stringreverse","title":"Inverter os caracters de uma string (string.reverse)","text":"<p>A fun\u00e7\u00e3o <code>string.reverse</code> \u00e9 usada para inverter a ordem dos caracteres de uma string.</p> <p>Exemplo de uso:</p> LuaConsole <pre><code>local palavra = \"Lua\"\nlocal palavra_invertida = string.reverse(palavra)\nprint(palavra_invertida)\n</code></pre> <pre><code>auL\n</code></pre> <p>Neste exemplo, a fun\u00e7\u00e3o <code>string.reverse</code> \u00e9 usada para inverter a ordem dos caracteres da string <code>palavra</code> e armazen\u00e1-la na vari\u00e1vel <code>palavra_invertida</code>.</p>"},{"location":"Lua%20Guide/Lua%20Library/string/#repetir-uma-string-stringrep","title":"Repetir uma String (string.rep)","text":"<p>A fun\u00e7\u00e3o <code>string.rep</code> permite repetir uma string um determinado n\u00famero de vezes. Ela recebe dois par\u00e2metros: a string a ser repetida e a quantidade de vezes que ela deve ser repetida.</p> <p>Exemplo de uso:</p> LuaConsole <pre><code>local original = \"Ol\u00e1!\"\nlocal repetido = string.rep(original, 3)\nprint(repetido)\n</code></pre> <pre><code>Ol\u00e1!Ol\u00e1!Ol\u00e1!\n</code></pre> <p>Neste exemplo, a string <code>\"Ol\u00e1!\"</code> \u00e9 repetida tr\u00eas vezes, resultando na sa\u00edda <code>\"Ol\u00e1!Ol\u00e1!Ol\u00e1!\"</code>.</p>"},{"location":"Lua%20Guide/Lua%20Library/string/#encontrar-padroes-em-uma-string-stringgmatch","title":"Encontrar Padr\u00f5es em uma String (string.gmatch)","text":"<p>A fun\u00e7\u00e3o <code>string.gmatch</code> \u00e9 usada para iterar sobre as ocorr\u00eancias de um padr\u00e3o em uma string. Ela recebe dois par\u00e2metros: a string a ser analisada e o padr\u00e3o a ser procurado. Ela retorna uma fun\u00e7\u00e3o iteradora que pode ser usada em um loop <code>for</code>.</p> <p>Exemplo de uso:</p> LuaConsole <pre><code>local texto = \"Lua \u00e9 uma linguagem de programa\u00e7\u00e3o\"\n\nfor palavra in string.gmatch(texto, \"[%a\u00e9\u00e7\u00e3]+\") do\n  print(palavra)\nend\n</code></pre> <pre><code>Lua\n\u00e9\numa\nlinguagem\nde\nprograma\u00e7\u00e3o\n</code></pre> <p>Neste exemplo, a express\u00e3o <code>\"%a+\"</code> \u00e9 utilizada como padr\u00e3o para encontrar palavras na string <code>texto</code>. O loop <code>for</code> itera sobre todas as palavras encontradas ias imprime.</p>"},{"location":"Lua%20Guide/Lua%20Library/string/#substituir-padroes-em-uma-string-stringgsub","title":"Substituir Padr\u00f5es em uma String (string.gsub)","text":"<p>A fun\u00e7\u00e3o string.gsub \u00e9 usada para substituir todas as ocorr\u00eancias de um padr\u00e3o em uma string por outro valor. A sintaxe b\u00e1sica \u00e9 a seguinte:</p> LuaConsole <pre><code>local texto = \"Lua \u00e9 uma linguagem de programa\u00e7\u00e3o\"\nlocal novo_texto = string.gsub(texto, \"linguagem\", \"idioma\")\nprint(novo_texto)\n</code></pre> <pre><code>Lua \u00e9 uma idioma de programa\u00e7\u00e3o\n</code></pre> <p>Neste exemplo, a palavra \"linguagem\" \u00e9 substitu\u00edda por \"idioma\" na string <code>texto</code>. A fun\u00e7\u00e3o <code>string.gsub</code> retorna a nova string com as substitui\u00e7\u00f5es aplicadas. A sa\u00edda ser\u00e1 <code>\"Lua \u00e9 uma idioma de programa\u00e7\u00e3o\"</code>.</p>"},{"location":"Lua%20Guide/Lua%20Library/string/#encontrar-padroes","title":"Encontrar Padr\u00f5es","text":"<p>Uma classe de caracteres \u00e9 usada para representar um conjunto de caracteres. As seguintes combina\u00e7\u00f5es s\u00e3o permitidas para descrever uma classe de caracteres:</p> <p>Elas s\u00e3o amplamente utilizadas em diversas fun\u00e7\u00f5es da biblioteca de strings do Lua, como <code>string.match</code>, <code>string.gmatch</code> e <code>string.gsub</code>.</p> Caractere de Classe descri\u00e7\u00e3o %a representa todas as letras. %c representa todos os caracteres de controle. %d representa todos os d\u00edgitos. %l representa todas as letras min\u00fasculas. %p representa todos os caracteres de pontua\u00e7\u00e3o. %s representa todos os caracteres de espa\u00e7o. %u representa todas as letras mai\u00fasculas. %w representa todos os caracteres alfanum\u00e9ricos. %x representa todos os d\u00edgitos hexadecimais (0-9, a-f, A-F). %z representa o caractere com representa\u00e7\u00e3o 0. %x representa o pr\u00f3prio caractere x (ex: %., %\u00e7, %\u00f5) [set] representa a classe que \u00e9 a uni\u00e3o de todos os caracteres no conjunto [^set] representa o complemento do conjunto, onde o conjunto \u00e9 interpretado como descrito acima. <p>Exemplo com <code>%a</code>:</p> LuaConsole <pre><code>local texto = \"Ol\u00e1, mundo!\"\nlocal texto_encontrado = string.match(texto, \"%a+\")\n\nprint(texto_encontrado)\n</code></pre> <pre><code>Ol\n</code></pre> <p>Note</p> <p><code>string.match</code> retorna apenas o primeiro padr\u00e3o encontrado, se voc\u00ea utilizar apenas <code>%a</code> por exemplo, ele ir\u00e1 retornar apenas um \u00fanico caracter.</p> <p>Exemplo com <code>%x</code>:</p> LuaConsole <pre><code>local texto = \"Ol\u00e1, mundo!\"\nlocal texto_encontrado = string.match(texto, \"%!\")\n\nprint(texto_encontrado)\n</code></pre> <pre><code>!\n</code></pre> <p>Exemplo com <code>[set]</code>:</p> LuaConsole <pre><code>local texto = \"Ola, mundo!\"\n\nfor texto_encontrado in string.gmatch(texto, \"[Oauo]\") do\n  print(texto_encontrado)\nend\n</code></pre> <pre><code>O\na\nu\no\n</code></pre> <p>Exemplo com <code>[^set]</code>:</p> LuaConsole <pre><code>local texto = \"Ola, mundo!\"\n\nfor texto_encontrado in string.gmatch(texto, \"[^Oauo]\") do\n  print(texto_encontrado)\nend\n</code></pre> <pre><code>l\n,\n\nm\nn\nd\n!\n</code></pre>"},{"location":"Lua%20Guide/Lua%20Library/table/","title":"Biblioteca <code>table</code> do Lua","text":"<p>A biblioteca <code>table</code> do Lua fornece uma s\u00e9rie de fun\u00e7\u00f5es para manipular e trabalhar com tabelas, que s\u00e3o a principal estrutura de dados em Lua. Essas fun\u00e7\u00f5es permitem adicionar, remover, pesquisar e modificar elementos em uma tabela, bem como realizar opera\u00e7\u00f5es como ordena\u00e7\u00e3o e itera\u00e7\u00e3o.</p> <p>Neste tutorial, exploraremos algumas das principais fun\u00e7\u00f5es da biblioteca <code>table</code>, juntamente com exemplos de uso.</p>"},{"location":"Lua%20Guide/Lua%20Library/table/#funcao-tableinsert","title":"Fun\u00e7\u00e3o <code>table.insert</code>","text":"<p>A fun\u00e7\u00e3o <code>table.insert</code> permite adicionar elementos a uma tabela em uma determinada posi\u00e7\u00e3o. Ela aceita dois argumentos: a tabela na qual o elemento ser\u00e1 inserido e o elemento em si.</p> LuaConsole <pre><code>local fruits = {\"apple\", \"banana\", \"orange\"}\ntable.insert(fruits, 2, \"grape\")\n\nprint(table.concat(fruits, \", \"))\n</code></pre> <pre><code>apple, grape, banana, orange\n</code></pre> <p>No exemplo acima, usamos <code>table.insert</code> para inserir a fruta \"grape\" na posi\u00e7\u00e3o 2 da tabela <code>fruits</code>. O resultado \u00e9 uma tabela modificada onde \"grape\" \u00e9 adicionado entre \"apple\" e \"banana\".</p>"},{"location":"Lua%20Guide/Lua%20Library/table/#funcao-tableremove","title":"Fun\u00e7\u00e3o <code>table.remove</code>","text":"<p>A fun\u00e7\u00e3o <code>table.remove</code> permite remover um elemento de uma tabela em uma determinada posi\u00e7\u00e3o. Ela aceita dois argumentos: a tabela da qual o elemento ser\u00e1 removido e a posi\u00e7\u00e3o do elemento a ser removido.</p> LuaConsole <pre><code>local fruits = {\"apple\", \"grape\", \"banana\", \"orange\"}\ntable.remove(fruits, 3)\n\nprint(table.concat(fruits, \", \"))\n</code></pre> <pre><code>apple, grape, orange\n</code></pre> <p>Neste exemplo, utilizamos <code>table.remove</code> para remover a fruta na posi\u00e7\u00e3o 3 da tabela <code>fruits</code>. Como resultado, a tabela <code>fruits</code> \u00e9 modificada, e a fruta \"banana\" \u00e9 removida.</p>"},{"location":"Lua%20Guide/Lua%20Library/table/#funcao-tablesort","title":"Fun\u00e7\u00e3o <code>table.sort</code>","text":"<p>A fun\u00e7\u00e3o <code>table.sort</code> permite ordenar os elementos de uma tabela em ordem crescente. Ela aceita um \u00fanico argumento, a tabela a ser ordenada.</p> LuaConsole <pre><code>local numbers = {5, 2, 8, 1, 4}\ntable.sort(numbers)\n\nprint(table.concat(numbers, \", \"))\n</code></pre> <pre><code>1, 2, 4, 5, 8\n</code></pre> <p>No exemplo acima, utilizamos <code>table.sort</code> para ordenar a tabela <code>numbers</code> em ordem crescente. O resultado \u00e9 uma tabela modificada onde os elementos est\u00e3o organizados de forma ascendente.</p>"},{"location":"Lua%20Guide/Lua%20Library/table/#funcao-tableforeach-deprecated","title":"Fun\u00e7\u00e3o <code>table.foreach</code> (deprecated)","text":"<p>A fun\u00e7\u00e3o <code>table.foreach</code> permite iterar sobre os elementos de uma tabela e aplicar uma fun\u00e7\u00e3o a cada elemento. Ela aceita dois argumentos: a tabela a ser percorrida e a fun\u00e7\u00e3o a ser aplicada a cada elemento.</p> LuaConsole <pre><code>local fruits = {\"apple\", \"grape\", \"banana\", \"orange\"}\ntable.foreach(fruits, function(index, value)\n    print(index, value)\nend)\n</code></pre> <pre><code>1    apple\n2    grape\n3    banana\n4   orange\n</code></pre>"},{"location":"Lua%20Guide/Lua%20Library/table/#funcao-tablegetn-deprecated","title":"Fun\u00e7\u00e3o <code>table.getn</code> (deprecated)","text":"<p>A fun\u00e7\u00e3o <code>table.getn</code> retorna o n\u00famero de elementos em uma tabela. No entanto, a partir do Lua 5.2, essa fun\u00e7\u00e3o foi descontinuada e n\u00e3o \u00e9 mais recomendada. Em vez disso, voc\u00ea pode usar o operador <code>#</code> para obter o tamanho de uma tabela.</p> <p>Warning</p> <p>Essa fun\u00e7\u00e3o foi descontinuada e n\u00e3o \u00e9 mais recomendada. Em vez disso, voc\u00ea pode usar o operador <code>#</code> para obter o tamanho de uma tabela.</p> LuaConsole <pre><code>local fruits = {\"apple\", \"grape\", \"banana\", \"orange\"}\nlocal size = #fruits\n\nprint(size)\n</code></pre> <pre><code>4\n</code></pre>"},{"location":"Lua%20Guide/Lua%20Library/table/#funcao-tableunpack-nao-esta-disponivel-no-luajit","title":"Fun\u00e7\u00e3o <code>table.unpack</code> (N\u00e3o est\u00e1 dispon\u00edvel no LuaJIT)","text":"<p>A fun\u00e7\u00e3o <code>table.unpack</code> retorna os elementos de uma tabela como valores separados. Ela aceita um \u00fanico argumento, a tabela a ser desempacotada.</p> LuaConsole <pre><code>local numbers = {1, 2, 3, 4, 5}\nlocal unpacked = table.unpack(numbers)\n\nprint(unpacked)\n</code></pre> <pre><code>1    2    3    4    5\n</code></pre> <p>No exemplo acima, utilizamos <code>table.unpack</code> para desempacotar a tabela <code>numbers</code> em valores separados. Os valores s\u00e3o impressos em sequ\u00eancia.</p>"},{"location":"Lua%20Guide/Lua%20Library/table/#funcao-tablemove-lua-53","title":"Fun\u00e7\u00e3o <code>table.move</code> (Lua 5.3+)","text":"<p>A fun\u00e7\u00e3o <code>table.move</code> copia elementos de uma tabela para outra, com suporte para mover elementos dentro da mesma tabela. Ela aceita quatro argumentos: a tabela de origem, a posi\u00e7\u00e3o de in\u00edcio na tabela de origem, a posi\u00e7\u00e3o de fim na tabela de origem e a posi\u00e7\u00e3o de destino na tabela de destino.</p> LuaConsole <pre><code>local numbers = {1, 2, 3, 4, 5}\nlocal destination = {}\n\ntable.move(numbers, 2, 4, 1, destination)\n\nprint(table.concat(destination, \", \"))\n</code></pre> <pre><code>2, 3, 4\n</code></pre> <p>No exemplo acima, usamos <code>table.move</code> para copiar os elementos da posi\u00e7\u00e3o 2 \u00e0 4 da tabela <code>numbers</code> para a tabela <code>destination</code>, a partir da posi\u00e7\u00e3o 1. O resultado \u00e9 uma tabela <code>destination</code> com os elementos copiados.</p>"},{"location":"Lua%20Guide/Lua%20Library/table/#funcao-tablepack-nao-esta-disponivel-no-luajit","title":"Fun\u00e7\u00e3o <code>table.pack</code> (N\u00e3o est\u00e1 dispon\u00edvel no LuaJIT)","text":"<p>A fun\u00e7\u00e3o <code>table.pack</code> retorna uma tabela contendo todos os argumentos passados para ela. Essa fun\u00e7\u00e3o \u00e9 \u00fatil quando voc\u00ea precisa lidar com um n\u00famero vari\u00e1vel de argumentos em uma fun\u00e7\u00e3o.</p> LuaConsole <pre><code>local function printArgs(...)\n    local args = table.pack(...)\n    for i = 1, args.n do\n        print(args[i])\n    end\nend\n\nprintArgs(\"apple\", \"banana\", \"orange\")\n</code></pre> <pre><code>apple\nbanana\norange\n</code></pre> <p>No exemplo acima, usamos <code>table.pack</code> para empacotar todos os argumentos passados para a fun\u00e7\u00e3o <code>printArgs</code>. Em seguida, iteramos sobre a tabela <code>args</code> e imprimimos cada argumento.</p> <p>Essas s\u00e3o apenas algumas das fun\u00e7\u00f5es dispon\u00edveis na biblioteca <code>table</code> do Lua. Elas fornecem uma variedade de recursos para manipular tabelas e s\u00e3o amplamente utilizadas no desenvolvimento de aplicativos Lua.</p>"},{"location":"Lua%20Guide/Tables/","title":"Tabelas","text":"<p>As tabelas em Lua s\u00e3o uma estrutura de dados extremamente vers\u00e1til, podendo ser utilizadas tanto como arrays quanto como dicion\u00e1rios. Vejamos alguns exemplos para ilustrar esses casos:</p> <p>Exemplo de Array em Lua:</p> LuaConsole <pre><code>local meuArray = {\"ma\u00e7\u00e3\", \"banana\", \"laranja\"}\n\nprint(meuArray[1])\nprint(meuArray[2])\nprint(meuArray[3])\n</code></pre> <pre><code>ma\u00e7a\nbanana\nlaranja\n</code></pre> <p>Exemplo de Dicion\u00e1rio</p> LuaConsole <pre><code>local meuDicionario = {\n  fruta = \"ma\u00e7\u00e3\",\n  animal = \"cachorro\",\n  cor = \"azul\"\n}\n\nprint(meuDicionario.fruta)\nprint(meuDicionario.animal)\nprint(meuDicionario.cor)\n</code></pre> <pre><code>ma\u00e7a\ncachorro\nazul\n</code></pre>"},{"location":"Lua%20Guide/Tables/arrays/","title":"Arrays","text":"<p>Arrays s\u00e3o estruturas de dados que permitem armazenar uma cole\u00e7\u00e3o de elementos sequenciais, onde cada elemento \u00e9 identificado por um \u00edndice num\u00e9rico. Os arrays s\u00e3o implementados utilizando tabelas, onde os \u00edndices num\u00e9ricos s\u00e3o utilizados para acessar os elementos da tabela.</p> LuaConsole <pre><code>local meuArray = { 1, 2, 3, 4, 5 }\n\n\nprint(meuArray[1])\nprint(meuArray[2])\nprint(meuArray[3])\nprint(meuArray[4])\nprint(meuArray[5])\n</code></pre> <pre><code>1\n2\n3\n4\n5\n</code></pre> <p>Note</p> <p>As tabelas s\u00e3o estruturadas com \u00edndices iniciando em 1, n\u00e3o em 0. Isso significa que o primeiro elemento de uma tabela \u00e9 acessado pelo \u00edndice 1, o segundo elemento pelo \u00edndice 2 e assim por diante.</p>"},{"location":"Lua%20Guide/Tables/arrays/#flexibilidade-de-tipos","title":"Flexibilidade de Tipos","text":"<p>Uma das caracter\u00edsticas interessantes dos arrays em Lua \u00e9 a flexibilidade em rela\u00e7\u00e3o aos tipos de dados armazenados. Ao contr\u00e1rio de algumas linguagens de programa\u00e7\u00e3o, n\u00e3o \u00e9 necess\u00e1rio que todos os elementos de um array em Lua sejam do mesmo tipo.</p> LuaConsole <pre><code>local meuArray = {10, \"Lua\", true, {1, 2, 3}}\n\nprint(meuArray[1])\nprint(meuArray[2])\nprint(meuArray[3])\nprint(meuArray[4][2])\n</code></pre> <pre><code>10\nLua\ntrue\n2\n</code></pre>"},{"location":"Lua%20Guide/Tables/arrays/#adicionandos-elementos-em-um-array","title":"Adicionandos elementos em um array","text":"<p>Em Lua, \u00e9 poss\u00edvel adicionar novos elementos em um array de forma simples, sem a necessidade de utilizar fun\u00e7\u00f5es espec\u00edficas. Basta atribuir um valor a um novo \u00edndice do array.</p> LuaConsole <pre><code>local meuArray = {}\n\nmeuArray[1] = \"Primeiro elemento\"\nmeuArray[2] = \"Segundo elemento\"\nmeuArray[3] = \"Terceiro elemento\"\nmeuArray[#meuArray + 1] = \"\u00daltimo elemento\"\n\nprint(meuArray[1])\nprint(meuArray[2])\nprint(meuArray[3])\nprint(meuArray[4])\n</code></pre> <pre><code>Primeiro elemento\nSegundo elemento\nTerceiro elemento\n\u00daltimo elemento\n</code></pre> <p>Outra alternativa \u00e9 utilizar <code>table.insert</code> que est\u00e1 na biblioteca padr\u00e3o do Lua.</p> LuaConsole <pre><code>local meuArray = {}\n\ntable.insert(meuArray, \"Primeiro elemento\")\ntable.insert(meuArray, \"Segundo elemento\")\ntable.insert(meuArray, \"Terceiro elemento\")\ntable.insert(meuArray, \"\u00daltimo elemento\")\n\nprint(meuArray[1])\nprint(meuArray[2])\nprint(meuArray[3])\nprint(meuArray[4])\n</code></pre> <pre><code>Primeiro elemento\nSegundo elemento\nTerceiro elemento\n\u00daltimo elemento\n</code></pre> <p>Nesse exemplo, utilizamos a fun\u00e7\u00e3o <code>table.insert()</code> da biblioteca padr\u00e3o do Lua para adicionar os elementos ao array. A fun\u00e7\u00e3o <code>table.insert()</code> insere um elemento no final do array automaticamente.</p>"},{"location":"Lua%20Guide/Tables/arrays/#iterando-em-um-array","title":"Iterando em um array","text":"<p>Em Lua, \u00e9 poss\u00edvel iterar em um array de diferentes maneiras. Vou mostrar algumas das formas de como percorrer os elementos de um array.</p>"},{"location":"Lua%20Guide/Tables/arrays/#utilizando-o-laco-for","title":"Utilizando o la\u00e7o <code>for</code>","text":"<p>Um m\u00e9todo comum para iterar em um array \u00e9 usar o la\u00e7o <code>for</code> juntamente com o operador <code>#</code> para obter o tamanho do array. Aqui est\u00e1 um exemplo:</p> LuaConsole <pre><code>local meuArray = {\"Primeiro elemento\", \"Segundo elemento\", \"Terceiro elemento\", \"\u00daltimo elemento\"}\n\nfor i = 1, #meuArray do\n    print(meuArray[i])\nend\n</code></pre> <pre><code>Primeiro elemento\nSegundo elemento\nTerceiro elemento\n\u00daltimo elemento\n</code></pre> <p>Nesse exemplo, usamos o la\u00e7o <code>for</code> para iterar de <code>1</code> at\u00e9 o tamanho do array <code>`#meuArray</code>. A cada itera\u00e7\u00e3o, imprimimos o elemento correspondente ao \u00edndice <code>i</code>.</p>"},{"location":"Lua%20Guide/Tables/arrays/#utilizando-a-funcao-ipairs","title":"Utilizando a fun\u00e7\u00e3o <code>ipairs()</code>","text":"<p>Outra forma conveniente de iterar em um array \u00e9 utilizando a fun\u00e7\u00e3o <code>ipairs()</code>, que retorna pares \u00edndice-valor. Aqui est\u00e1 um exemplo:</p> LuaConsole <pre><code>local meuArray = {\"Primeiro elemento\", \"Segundo elemento\", \"Terceiro elemento\", \"\u00daltimo elemento\"}\n\nfor i, valor in ipairs(meuArray) do\n    print(valor)\nend\n</code></pre> <pre><code>Primeiro elemento\nSegundo elemento\nTerceiro elemento\n\u00daltimo elemento\n</code></pre> <p>Warning</p> <p>O lua tamb\u00e9m disponibiliza outras duas fun\u00e7\u00f5es, <code>table.foreach</code> e <code>table.foreachi</code>, por\u00e9m elas foram descontinuadas e n\u00e3o s\u00e3o mais recomendadas para uso</p>"},{"location":"Lua%20Guide/Tables/arrays/#diferenca-entre-tabelas-e-outros-tipos-de-dados","title":"Diferen\u00e7a entre tabelas e outros tipos de dados","text":"<p>Ao contr\u00e1rio de strings, n\u00fameros, booleanos, e valores nulos (nil), as tabelas s\u00e3o mut\u00e1veis, o que significa que voc\u00ea pode modificar seus valores.</p> <p>No entanto, quando se trata de strings, se voc\u00ea tentar alterar o valor de uma string diretamente, nada acontecer\u00e1.</p> LuaConsole <pre><code>local hello = \"Ol\u00e1, mundo\"\nstring.upper(hello)\n\nprint(hello)\n</code></pre> <pre><code>Ol\u00e1, mundo\n</code></pre> <p>Isso ocorre porque as strings s\u00e3o consideradas \"somente leitura\" (read-only). Ao tentar alterar o valor de uma string, na verdade, uma nova string \u00e9 criada em um novo espa\u00e7o de mem\u00f3ria, mas a vari\u00e1vel original n\u00e3o \u00e9 modificada.</p> <p>Para efetuar a modifica\u00e7\u00e3o em uma string e salvar o novo valor na mesma vari\u00e1vel, voc\u00ea precisa atribuir o resultado da modifica\u00e7\u00e3o de volta \u00e0 vari\u00e1vel. Em outras palavras, voc\u00ea precisa atualizar a vari\u00e1vel para apontar para o novo endere\u00e7o de mem\u00f3ria onde est\u00e1 armazenada a string modificada.</p> LuaConsole <pre><code>local hello = \"Ol\u00e1, mundo\"\nhello = string.upper(hello)\n\nprint(hello)\n</code></pre> <pre><code>OL\u00c1, MUNDO\n</code></pre> <p>Com tabelas, n\u00e3o \u00e9 necess\u00e1rio fazer a atribui\u00e7\u00e3o de volta \u00e0 vari\u00e1vel. Ao modificar a tabela, o valor original ser\u00e1 alterado. Em outras palavras, ao realizar uma modifica\u00e7\u00e3o em uma tabela, voc\u00ea est\u00e1 alterando o espa\u00e7o de mem\u00f3ria onde a tabela est\u00e1 armazenada. N\u00e3o \u00e9 necess\u00e1rio criar uma nova tabela ou atualizar refer\u00eancias, pois as altera\u00e7\u00f5es s\u00e3o feitas diretamente no local de armazenamento da tabela.</p> LuaConsole <pre><code>local frutas = {}\n\nlocal function insert(t, value)\n  t[#t + 1] = value\n\n  -- n\u00e3o precisa de return\nend\n\ninsert(frutas, \"Uva\")\ninsert(frutas, \"Ma\u00e7a\")\ninsert(frutas, \"Laranja\")\n\nfor key, value in ipairs(frutas) do\n  print(key, value)\nend\n</code></pre> <pre><code>1       Uva\n2       Ma\u00e7a\n3       Laranja\n</code></pre>"},{"location":"Lua%20Guide/Tables/dictionary/","title":"Dicion\u00e1rios","text":"<p>Diferentes dos arrays, que utilizam \u00edndices num\u00e9ricos, os dicion\u00e1rios s\u00e3o estruturas de dados que utilizam pares de chave e valor para armazenar informa\u00e7\u00f5es. Os dicion\u00e1rios s\u00e3o frequentemente usados para representar objetos do mundo real.</p> LuaConsole <pre><code>local pessoa = {\n  nome = \"Max\",\n  endereco = {\n      pais = \"Brasil\"\n  }\n}\n\nprint(pessoa.nome)\nprint(pessoa.endereco.pais)\nprint(pessoa[\"nome\"])\nprint(pessoa[\"endereco\"][\"pais\"])\n</code></pre> <pre><code>Max\nBrasil\nMax\nBrasil\n</code></pre> <p>Como voc\u00ea pode ver, criar um dicion\u00e1rio e acessar seus valores \u00e9 bastante simples</p>"},{"location":"Lua%20Guide/Tables/dictionary/#adicionando-e-atualizando-valores","title":"Adicionando e atualizando valores","text":"<p>Voc\u00ea pode adicionar um novo par de chave e valor a uma tabela atribuindo um valor a uma nova chave espec\u00edfica.</p> LuaConsole <pre><code>local pessoa = {\n    nome = 'Roberto',\n}\n\npessoa.nome = 'Fernando'\npessoa.profissao = \"Engenheiro\"\n\nprint(pessoa.nome)\nprint(pessoa.profissao)\n</code></pre> <pre><code>Fernando\nEngenheiro\n</code></pre> <p>Agora a tabela \"pessoa\" ter\u00e1 um novo par de chave e valor: \"profissao\" \u00e9 \"Engenheiro\".</p>"},{"location":"Lua%20Guide/Tables/dictionary/#iterando-por-dicionarios-em-lua","title":"Iterando por Dicion\u00e1rios em Lua","text":"<p>Em Lua, \u00e9 poss\u00edvel iterar por um dicion\u00e1rio usando o la\u00e7o <code>for</code> juntamente com a fun\u00e7\u00e3o <code>pairs</code>. A fun\u00e7\u00e3o <code>pairs</code> retorna uma fun\u00e7\u00e3o iteradora que percorre todos os pares de chave e valor do dicion\u00e1rio.</p> LuaFun\u00e7\u00e3o personalizadaConsole <pre><code>local pessoa = {\n  nome = \"Max\",\n  idade = 30,\n  profissao = \"Engenheiro\"\n}\n\nfor chave, valor in pairs(pessoa) do\n  print(chave, valor)\nend\n</code></pre> <pre><code>local pessoa = {\n  nome = \"Max\",\n  idade = 30,\n  profissao = \"Engenheiro\",\n}\n\n-- Fun\u00e7\u00e3o para iterar sobre o dicion\u00e1rio\nlocal function iterarDicionario(tabela)\n  local chaveAnterior = nil  -- Vari\u00e1vel para armazenar a chave anterior\n\n  -- Fun\u00e7\u00e3o iteradora personalizada\n  return function(tabela)\n    local chave, valor = next(tabela, chaveAnterior)  -- Obt\u00e9m o pr\u00f3ximo par de chave e valor\n    chaveAnterior = chave  -- Armazena a chave atual para a pr\u00f3xima itera\u00e7\u00e3o\n    return chave, valor  -- Retorna a chave e o valor atual\n  end, tabela  -- Retorna a fun\u00e7\u00e3o iteradora e a tabela original\nend\n\nfor chave, valor in iterarDicionario(pessoa) do\n  print(chave, valor)\nend\n</code></pre> <pre><code>profissao       Engenheiro\nnome            Max\nidade           30\n</code></pre>"},{"location":"Lua%20Guide/Tables/dictionary/#criando-uma-copia-de-uma-tabela","title":"Criando uma c\u00f3pia de uma tabela","text":"<p>Quando voc\u00ea atribui uma tabela a uma vari\u00e1vel ou passa uma tabela como argumento para uma fun\u00e7\u00e3o, o que \u00e9 passado ou atribu\u00eddo \u00e9 uma refer\u00eancia \u00e0 tabela original</p> <p>Isso significa que qualquer modifica\u00e7\u00e3o feita na tabela atrav\u00e9s da vari\u00e1vel ou da refer\u00eancia afeta diretamente a tabela original. No entanto, \u00e0s vezes voc\u00ea pode precisar criar uma c\u00f3pia independente da tabela original.</p> LuaSolu\u00e7\u00e3o mais simples <pre><code>local function deepcopy(orig, cache)\n  cache = cache or {}\n  if cache[orig] then\n    return cache[orig]\n  end\n\n  local t = type(orig)\n  local copy\n\n  if t == \"table\" then\n    copy = {}\n    cache[orig] = copy\n\n    local mt = getmetatable(orig)\n\n    if mt then\n      setmetatable(copy, deepcopy(mt, cache))\n    end\n\n    for k, v in next, orig, nil do\n      copy[deepcopy(k, cache)] = deepcopy(v, cache)\n    end\n  elseif t == \"number\" or t == \"string\" or t == \"nil\" or t == \"boolean\" or t == \"function\" then\n    copy = orig\n  else\n    error(\"Cannot deepcopy object of type \" .. t)\n  end\n\n  return copy\nend\n\nlocal original = {a = 1, b = 2, c = 3}\nlocal copia = deepcopy(original)\n</code></pre> <pre><code>local function original()\n    return { a = 1, b = 2, c = 3 }\nend\n\nlocal copia = original()\n</code></pre> <p>Agora, a vari\u00e1vel copia cont\u00e9m uma c\u00f3pia da tabela original. Qualquer modifica\u00e7\u00e3o feita na tabela copia n\u00e3o afetar\u00e1 a tabela original e vice-versa.</p> <p>Tip</p> <p>Acesse o site lua-users.org para ver outras alternativas de como copiar uma tabela.</p>"},{"location":"Lua%20Guide/Tables/metatables/","title":"Metatables, Metam\u00e9todos e Programa\u00e7\u00e3o Orientada a Objetos","text":"<p>Em Lua, \u00e9 poss\u00edvel implementar Programa\u00e7\u00e3o Orientada a Objetos (POO) por meio do uso de metatables e metam\u00e9todos. Os metam\u00e9todos s\u00e3o fun\u00e7\u00f5es especiais que s\u00e3o chamadas automaticamente quando certas opera\u00e7\u00f5es s\u00e3o realizadas em um objeto. Alguns dos metam\u00e9todos mais comuns em Lua s\u00e3o <code>__index</code>, <code>__newindex</code>, <code>__tostring</code>. Aqui est\u00e1 uma explica\u00e7\u00e3o de cada um deles:</p>"},{"location":"Lua%20Guide/Tables/metatables/#__index","title":"<code>__index</code>","text":"<p>O metam\u00e9todo <code>__index</code> \u00e9 chamado quando uma chave \u00e9 acessada em uma tabela que n\u00e3o existe nessa tabela. Ele permite que voc\u00ea defina um comportamento personalizado para a busca de chaves em uma tabela. Voc\u00ea pode usar o <code>__index</code> para redirecionar a busca para outra tabela, criando assim heran\u00e7a ou fornecendo um valor padr\u00e3o para chaves ausentes. Aqui est\u00e1 um exemplo:</p> LuaConsole <pre><code>local pessoa = { nome = \"Jo\u00e3o\", idade = 25 }\n\nlocal pessoaMetatable = {\n  __index = { profissao = \"Desenvolvedor\" }\n}\n\nsetmetatable(pessoa, pessoaMetatable)\n\nprint(pessoa.nome)\nprint(pessoa.idade)\nprint(pessoa.profissao)\n</code></pre> <pre><code>Jo\u00e3o\n25\nDesenvolvedor\n</code></pre> <p>Neste exemplo, a tabela pessoa recebe uma metatable pessoaMetatable que possui um <code>__index</code> definido como outra tabela. Quando uma chave n\u00e3o \u00e9 encontrada na tabela pessoa, a busca \u00e9 redirecionada para a tabela definida em <code>__index</code>, fornecendo assim um valor padr\u00e3o para a chave.</p>"},{"location":"Lua%20Guide/Tables/metatables/#__newindex","title":"<code>__newindex</code>","text":"<p>O metam\u00e9todo __newindex \u00e9 chamado quando um novo valor \u00e9 atribu\u00eddo a uma chave em uma tabela que n\u00e3o existe previamente. Ele permite que voc\u00ea defina um comportamento personalizado para a atribui\u00e7\u00e3o de valores a uma tabela. Voc\u00ea pode us\u00e1-lo para aplicar valida\u00e7\u00f5es, executar a\u00e7\u00f5es espec\u00edficas ou redirecionar a atribui\u00e7\u00e3o para outra tabela. Veja um exemplo:</p> LuaConsole <pre><code>local pessoa = { nome = \"Jo\u00e3o\", idade = 25 }\n\nlocal pessoaMetatable = {\n  __newindex = function(tabela, chave, valor)\n    if chave == \"profissao\" then\n      rawset(tabela, chave, valor)\n    else\n      error(\"A chave \" .. chave .. \" n\u00e3o pode ser adicionada a esta tabela.\")\n    end\n  end\n}\n\nsetmetatable(pessoa, pessoaMetatable)\n\npessoa.profissao = \"Desenvolvedor\"\npessoa.salario = 5000 -- error\n</code></pre> <pre><code>luajit.exe: init.lua:8: A chave salario n\u00e3o pode ser adicionada a esta tabela.\nstack traceback:\n        [C]: in function 'error'\n        init.lua:8: in function '__newindex'\n        init.lua:16: in main chunk\n        [C]: at 0x7ff7e08c1fd0\n</code></pre> <p>Neste exemplo, a metatable <code>pessoaMetatable</code> define um <code>__newindex</code> que verifica se a chave \u00e9 \"profissao\". Se a chave for \"profissao\", o valor \u00e9 atribu\u00eddo \u00e0 tabela usando a fun\u00e7\u00e3o <code>rawset</code>. Caso contr\u00e1rio, um erro \u00e9 gerado para indicar que a chave n\u00e3o pode ser adicionada \u00e0 tabela. Dessa forma, o metam\u00e9todo <code>__newindex</code> permite controlar o comportamento de atribui\u00e7\u00e3o de valores em uma tabela, fornecendo a possibilidade de valida\u00e7\u00e3o ou redirecionamento de atribui\u00e7\u00f5es.</p>"},{"location":"Lua%20Guide/Tables/metatables/#__tostring","title":"<code>__tostring</code>","text":"<p>O metam\u00e9todo <code>__tostring</code> \u00e9 chamado quando um objeto \u00e9 convertido em uma string. Ele permite que voc\u00ea defina uma representa\u00e7\u00e3o personalizada do objeto quando ele \u00e9 usado em contexto de string. Aqui est\u00e1 um exemplo:</p> LuaConsole <pre><code>local pessoa = { nome = \"Carlos\", idade = 35 }\n\nlocal pessoaMetatable = {\n  __tostring = function(tabela)\n    return \"Pessoa: \" .. tabela.nome .. \", Idade: \" .. tabela.idade\n  end\n}\n\nsetmetatable(pessoa, pessoaMetatable)\n\nprint(pessoa)\n</code></pre> <pre><code>Pessoa: Carlos, Idade: 35\n</code></pre> <p>Neste exemplo, a metatable pessoaMetatable define um <code>__tostring</code> que retorna uma representa\u00e7\u00e3o personalizada da tabela pessoa. Quando pessoa \u00e9 utilizado em um contexto de string, o metam\u00e9todo <code>__tostring</code> \u00e9 chamado para fornecer a representa\u00e7\u00e3o desejada.</p>"},{"location":"Lua%20Guide/Tables/metatables/#definindo-classes","title":"Definindo Classes","text":"<p>Com o uso de metatables em Lua, \u00e9 poss\u00edvel implementar conceitos de programa\u00e7\u00e3o orientada a objetos (OOP) de forma flex\u00edvel. Vou fornecer um exemplo b\u00e1sico de como criar uma classe simples em Lua usando metatables:</p> Lua (Padr\u00e3o)Lua (2\u00ba alternativa)Lua (3\u00ba alternativa)Console <pre><code>local Pessoa = {}\n\nfunction Pessoa:new(t)\n  setmetatable(t, Pessoa)\n  self.__index = self\n\n  return t\nend\n\n-- M\u00e9todo da classe\nfunction Pessoa:falar()\n  print(\"Ol\u00e1, meu nome \u00e9 \" .. self.nome .. \" e eu tenho \" .. self.idade .. \" anos.\")\nend\n\nfunction Pessoa:__tostring()\n  return string.format(\"Nome: %s \\nIdade: %d\", self.nome, self.idade)\nend\n\nlocal pessoa1 = Pessoa:new({ nome = \"Jo\u00e3o\", idade = 30 })\npessoa1:falar() -- Sa\u00edda: Ol\u00e1, meu nome \u00e9 Jo\u00e3o e eu tenho 30 anos.\nprint(pessoa1)\n</code></pre> <pre><code>local Pessoa = {}\n\nPessoa.__index = Pessoa\n\nfunction Pessoa.new(nome, idade)\n  local self = setmetatable({}, Pessoa)\n  self.nome = nome\n  self.idade = idade\n  return self\nend\n\nfunction Pessoa:falar()\n  print(\"Ol\u00e1, meu nome \u00e9 \" .. self.nome .. \" e eu tenho \" .. self.idade .. \" anos.\")\nend\n\nfunction Pessoa:__tostring()\n  return string.format(\"Nome: %s \\nIdade: %d\", self.nome, self.idade)\nend\n\nlocal pessoa1 = Pessoa.new(\"Jo\u00e3o\", 30)\npessoa1:falar()\nprint(pessoa1)\n</code></pre> <pre><code>local Pessoa = {}\n\nsetmetatable(Pessoa, Pessoa)\n\nfunction Pessoa:__call(t)\n  setmetatable(t, Pessoa)\n  self.__index = self\n\n  return t\nend\n\n-- M\u00e9todo da classe\nfunction Pessoa:falar()\n  print(\"Ol\u00e1, meu nome \u00e9 \" .. self.nome .. \" e eu tenho \" .. self.idade .. \" anos.\")\nend\n\nfunction Pessoa:__tostring()\n  return string.format(\"Nome: %s \\nIdade: %d\", self.nome, self.idade)\nend\n\nlocal pessoa1 = Pessoa({ nome = \"Jo\u00e3o\", idade = 30 })\npessoa1:falar()\nprint(pessoa1)\n</code></pre> <pre><code>Ol\u00e1, meu nome \u00e9 Jo\u00e3o eu tenho 30 anos.\nNome: Jo\u00e3o\nIdade: 30\n</code></pre>"},{"location":"python/beginner/","title":"Beginner","text":""},{"location":"python/beginner/#installation","title":"Installation","text":"<p>Python's website python.org</p> ArchLinuxWindowsMacos <pre><code>paru -S python\n</code></pre> <pre><code>scoop bucket add main\nscoop install python\n</code></pre> <pre><code>brew install python\n</code></pre>"},{"location":"python/beginner/#choosing-an-ide","title":"Choosing an IDE","text":"<ul> <li>vscode</li> <li>pycharm</li> <li>neovim</li> </ul>"},{"location":"python/beginner/#first-program","title":"First Program","text":"main.pyconsole <pre><code>print(\"Hello World\")\n</code></pre> <pre><code>Hello World\n</code></pre>"},{"location":"python/beginner/#strings","title":"Strings","text":"main.pyconsole <pre><code>print(\"Hello\" + \" \" + \"world!\")\n</code></pre> <pre><code>Hello world!\n</code></pre>"},{"location":"python/beginner/#input-function","title":"Input function","text":"main.pyconsole <pre><code>print('Hello ' + input('What is your name?') + '!')\n</code></pre> <pre><code>Hello Max!\n</code></pre>"},{"location":"python/beginner/#variables","title":"Variables","text":"main.pyconsole <pre><code>name = \"Max\"\nprint(name)\n</code></pre> <pre><code>Max\n</code></pre>"}]}